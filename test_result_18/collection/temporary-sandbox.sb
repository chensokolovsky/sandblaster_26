(version 1)
(allow default)
(deny file-ioctl
	(require-all
		(literal)
		(require-not (signing-identifier "com.apple.wapic"))
		(require-not (signing-identifier "com.apple.mDNSResponderHelper")))
	(require-all
		(literal "/dev/ttys")
		(signing-identifier "com.apple.privacyaccountingctl")
		(require-not (regex #"^/dev/ttys[0-9]" #"^/dev/ttys[0-9]+")))
	(require-all
		(signing-identifier "com.apple.gpsd")
		(require-not (literal "/dev/cu.gps")))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 65))
		(require-not (signing-identifier "com.apple.storagekitd")))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 24))
		(require-not (signing-identifier "com.apple.storagekitd")))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 22))
		(require-not (signing-identifier "com.apple.storagekitd")))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 31))
		(require-not (signing-identifier "com.apple.storagekitd")))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 25))
		(require-not (signing-identifier "com.apple.storagekitd"))))
(deny file-issue-extension
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(require-all
				(extension com.apple.mediaserverd.read-write)
				(require-not (signing-identifier "com.apple.mediaplaybackd"))
				(require-not (signing-identifier "com.apple.cameracaptured")))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")
				(require-not (signing-identifier "com.apple.momentsd")))
			(require-all
				(signing-identifier "com.apple.geoanalyticsd")
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")))
			(require-all
				(signing-identifier "com.apple.avconferenced")
				(require-all (require-not (subpath "/private/var/tmp/com.apple.avconferenced"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.avconferenced"))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(require-all
				(extension com.apple.mediaserverd.read-write)
				(require-not (signing-identifier "com.apple.mediaplaybackd"))
				(require-not (signing-identifier "com.apple.cameracaptured")))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")
				(require-not (signing-identifier "com.apple.momentsd")))
			(require-all
				(signing-identifier "com.apple.geoanalyticsd")
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")))
			(require-all
				(signing-identifier "com.apple.avconferenced")
				(require-all (require-not (subpath "/private/var/tmp/com.apple.avconferenced"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.avconferenced"))))))
	(require-all
		(extension-class "com.apple.identityservices.send")
		(require-any
			(require-all
				(subpath "/private/var/tmp")
				(require-not (signing-identifier "com.apple.usernotificationsd"))
				(require-any
					(require-all
						(subpath "/private/var/tmp")
						(require-not (signing-identifier "com.apple.Carousel")))
					(require-all
						(subpath-prefix "${PROCESS_TEMP_DIR}")
						(require-not (signing-identifier "com.apple.Carousel")))))
			(require-all
				(subpath-prefix "${HOME}/Library/UserNotifications")
				(require-not (signing-identifier "com.apple.usernotificationsd"))
				(require-any
					(require-all
						(subpath "/private/var/tmp")
						(require-not (signing-identifier "com.apple.Carousel")))
					(require-all
						(subpath-prefix "${PROCESS_TEMP_DIR}")
						(require-not (signing-identifier "com.apple.Carousel")))))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(require-not (signing-identifier "com.apple.usernotificationsd"))
				(require-any
					(require-all
						(subpath "/private/var/tmp")
						(require-not (signing-identifier "com.apple.Carousel")))
					(require-all
						(subpath-prefix "${PROCESS_TEMP_DIR}")
						(require-not (signing-identifier "com.apple.Carousel")))))
			(require-all
				(subpath-prefix "${HOME}/Library/Logs/Brook")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor")
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(subpath-prefix "${HOME}/Library/Application Support/com.apple.FaceTime/VideoMessaging/Outbox")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))))
	(require-all
		(extension-class "com.apple.StreamingUnzipService")
		(require-any
			(require-all
				(signing-identifier "com.apple.managedappdistributiond")
				(require-not (regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/Library/Caches/Scratch"))
				(require-not (subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.installcoordinationd/Library/InstallCoordination/PromiseStaging")))
			(require-all
				(subpath-prefix "${HOME}/Library/VoiceTrigger")
				(require-not (signing-identifier "com.apple.corespeechd")))
			(require-all
				(signing-identifier "com.apple.assistantd")
				(require-not (subpath-prefix "${HOME}/Library/Caches/VoiceTrigger")))))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(literal "/private/var/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(literal "/private/var/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(literal "/private/var/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.quicklook.readonly")
		(require-any
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")
				(subpath-prefix "${HOME}")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(subpath-prefix "${HOME}/Library/BulletinDistributor/Attachments")
				(require-not (signing-identifier "com.apple.Carousel")))))
	(require-all
		(extension-class "com.apple.sandbox.container-proxy")
		(signing-identifier "com.apple.CoreDevice.dtfilesandboxd")
		(require-not (extension com.apple.sandbox.application-group))
		(literal "/private/var/")
		(extension com.apple.sandbox.container)
		(require-any
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")))
			(require-all
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")))))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")
				(subpath-prefix "${HOME}")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(subpath-prefix "${HOME}/Library/BulletinDistributor/Attachments")
				(require-not (signing-identifier "com.apple.Carousel")))))
	(require-all
		(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
		(require-any
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))))
	(require-all
		(extension com.apple.sandbox.application-group)
		(require-any
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple.")
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(extension-class "com.apple.identityservices.send")
		(require-any
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(subpath "/private/var/tmp")
				(require-not (signing-identifier "com.apple.announced"))
				(require-not (signing-identifier "com.apple.FTLivePhotoService")))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(require-not (signing-identifier "com.apple.announced"))
				(require-not (signing-identifier "com.apple.FTLivePhotoService")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(subpath-prefix "${HOME}/Library/Application Support/com.apple.FaceTime/VideoMessaging/Outbox")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))))
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.usernotifications.attachments.read-only")
		(require-any
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")
				(subpath-prefix "${HOME}")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(subpath-prefix "${HOME}/Library/BulletinDistributor/Attachments")
				(require-not (signing-identifier "com.apple.Carousel")))))
	(require-all
		(entitlement-is-bool-true com.apple.security.ts.ubiquity)
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
				(require-any
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))
					(require-all
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))))
			(require-all
				(extension com.apple.librarian.ubiquity-container)
				(require-any
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))
					(require-all
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (extension-class "com.apple.quicklook.readonly"))
						(require-not (extension-class "com.apple.app-sandbox.read-write"))
						(require-not (extension-class "com.apple.app-sandbox.read"))
						(require-not (extension-class "com.apple.sharing.airdrop.readonly"))
						(require-not (extension-class "com.apple.mediaserverd.read-write"))
						(require-not (extension-class "com.apple.aned.read-only"))
						(require-not (extension-class "com.apple.mediaserverd.read")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-not (extension com.apple.security.exception.files.home-relative-path.read-write))
				(require-not (extension com.apple.security.exception.files.absolute-path.read-write))
				(require-not (extension com.apple.app-sandbox.read-write)))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-not (extension com.apple.security.exception.files.home-relative-path.read-only))
				(require-not (extension com.apple.security.exception.files.absolute-path.read-only))
				(require-not (extension com.apple.security.exception.files.home-relative-path.read-write))
				(require-not (extension com.apple.security.exception.files.absolute-path.read-write))
				(require-not (extension com.apple.app-sandbox.read-write)))
			(require-all
				(extension-class "com.apple.quicklook.readonly")
				(require-any
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/iCloudDrive/[UNSUPPORTED]+/session/r/?")
						(require-not (extension com.apple.clouddocs.version)))
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (extension com.apple.clouddocs.version)))
					(require-all
						(subpath-prefix "${HOME}/Library/Application Support/CloudDocs/session/r")
						(vnode-type REGULAR-FILE)
						(require-not (extension com.apple.clouddocs.version)))
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/CloudDocs/session/r/?")
						(vnode-type REGULAR-FILE)
						(require-not (extension com.apple.clouddocs.version)))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-not (extension com.apple.app-sandbox.read-write)))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-not (extension com.apple.app-sandbox.read-write)))))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-not (extension com.apple.app-sandbox.read-write)))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-not (extension com.apple.app-sandbox.read-write)))
			(require-all
				(extension-class "com.apple.sharing.airdrop.readonly")
				(require-not (extension com.apple.app-sandbox.read-write)))))
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Caches/com[UNSUPPORTED]apple[UNSUPPORTED]metalassetupgrader/recompiled/?")
				(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$")
				(require-any
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
					(require-all
						(signing-identifier "com.apple.mediaplaybackd")
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(signing-identifier "com.apple.momentsd")
				(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))))
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(require-all
				(signing-identifier "com.apple.momentsd")
				(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))))
	(require-all
		(extension-class "com.apple.nsurlsessiond.readonly")
		(require-any
			(require-all
				(require-any (subpath "/private/var/tmp/com.apple.anomalydetectiond")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.anomalydetectiond"))
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(subpath-prefix "${HOME}/Library/com.apple.momentsd")
				(require-not (signing-identifier "com.apple.momentsd")))
			(require-all
				(signing-identifier "com.apple.geoanalyticsd")
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")))))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(extension com.apple.sandbox.application-group)
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
		(require-not (subpath-prefix "${FRONT_USER_HOME}")))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(require-all
				(signing-identifier "com.apple.momentsd")
				(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.StreamingUnzipService")
		(signing-identifier "com.apple.assistantd")
		(require-not (subpath-prefix "${HOME}/Library/Caches/VoiceTrigger")))
	(require-all
		(extension-class "com.apple.quicklook.readonly")
		(extension com.apple.sandbox.application-group)
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
		(require-not (subpath-prefix "${FRONT_USER_HOME}")))
	(require-all
		(extension-class "com.apple.identityservices.send")
		(require-any
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(subpath "/private/var/tmp")
				(require-not (signing-identifier "com.apple.FTLivePhotoService")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(require-not (signing-identifier "com.apple.FTLivePhotoService")))
			(require-all
				(subpath-prefix "${HOME}/Library/Application Support/com.apple.FaceTime/VideoMessaging/Outbox")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(require-all
				(signing-identifier "com.apple.momentsd")
				(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))))
	(require-all
		(signing-identifier "com.apple.SurfBoard")
		(literal "/private/var/")
		(subpath-prefix "${HOME}")
		(require-any
			(require-all
				(extension-class "com.apple.quicklook.readonly")
				(require-not (regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-not (regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")))
			(require-all
				(extension-class "com.apple.usernotifications.attachments.read-only")
				(require-not (regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")))))
	(require-all
		(extension-class "com.apple.sharing.airdrop.readonly")
		(extension com.apple.sandbox.application-group)
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
		(require-not (subpath-prefix "${FRONT_USER_HOME}")))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.nsurlsessiond.readonly")
		(require-any
			(require-all
				(require-any (subpath "/private/var/tmp/com.apple.anomalydetectiond")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.anomalydetectiond"))
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(subpath-prefix "${HOME}/Library/com.apple.momentsd")
				(require-not (signing-identifier "com.apple.momentsd")))
			(require-all
				(signing-identifier "com.apple.diagnosticextensionsd")
				(require-not (subpath-prefix "${HOME}/Library/Logs/com.apple.diagnosticextensionsd")))
			(require-all
				(signing-identifier "com.apple.geoanalyticsd")
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")))))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(require-all
				(signing-identifier "com.apple.momentsd")
				(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.nsurlsessiond.readonly")
		(extension com.apple.sandbox.application-group)
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
		(require-not (subpath-prefix "${FRONT_USER_HOME}")))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))))
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.StreamingUnzipService")
		(require-any
			(require-all
				(subpath-prefix "${HOME}/Library/VoiceTrigger")
				(require-not (signing-identifier "com.apple.corespeechd")))
			(require-all
				(signing-identifier "com.apple.assistantd")
				(require-not (subpath-prefix "${HOME}/Library/Caches/VoiceTrigger")))))
	(require-all
		(extension-class "com.apple.nsurlsessiond.readonly")
		(require-any
			(require-all
				(subpath-prefix "${HOME}/Library/com.apple.momentsd")
				(require-not (signing-identifier "com.apple.momentsd")))
			(require-all
				(signing-identifier "com.apple.geoanalyticsd")
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")))))
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(require-not (subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(literal "/private/var/")
						(extension com.apple.sandbox.application-group)
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
						(require-not (signing-identifier "com.apple.chronod")))
					(require-all
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
						(require-not (signing-identifier "com.apple.chronod")))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(require-all
				(signing-identifier "com.apple.momentsd")
				(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (extension com.apple.mediaserverd.read))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(signing-identifier "com.apple.mediaplaybackd")
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
								(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(signing-identifier "com.apple.linkd")
								(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
								(require-not (subpath "/private/var/containers/Bundle"))
								(require-not (subpath "/Developer/Applications"))
								(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
								(require-not (subpath "/Applications")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(signing-identifier "com.apple.linkd")
						(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
						(require-not (subpath "/private/var/containers/Bundle"))
						(require-not (subpath "/Developer/Applications"))
						(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
						(require-not (subpath "/Applications")))))))
	(require-all
		(extension-class "com.apple.wcd.readonly")
		(extension com.apple.sandbox.application-group)
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
		(require-not (subpath-prefix "${FRONT_USER_HOME}")))
	(require-all
		(extension-class "com.apple.identityservices.send")
		(require-any
			(require-all
				(subpath "/private/var/tmp")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(subpath-prefix "${HOME}/Library/Logs/Brook")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor")
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (signing-identifier "com.apple.FTLivePhotoService")))))
			(require-all
				(subpath-prefix "${HOME}/Library/Application Support/com.apple.FaceTime/VideoMessaging/Outbox")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))))
	(require-all
		(signing-identifier "com.apple.geoanalyticsd")
		(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
		(require-not (extension-class "com.apple.app-sandbox.read-write"))
		(require-not (extension-class "com.apple.app-sandbox.read"))
		(require-not (extension-class "com.apple.mediaserverd.read-write"))
		(require-not (extension-class "com.apple.aned.read-only"))
		(require-not (extension-class "com.apple.mediaserverd.read")))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(require-not (subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(literal "/private/var/")
						(extension com.apple.sandbox.application-group)
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))))
	(require-all
		(extension-class "com.apple.identityservices.send")
		(require-any
			(require-all
				(subpath-prefix "${HOME}/Library/Application Support/com.apple.FaceTime/VideoMessaging/Outbox")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))
			(require-all
				(subpath "/private/var/tmp")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))))
	(require-all
		(extension-class "com.apple.corespotlightservice.read-write")
		(signing-identifier "com.apple.health.records")
		(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.health.records/com.apple.corespotlightservice")))
	(require-all
		(extension-class "com.apple.spotlight-indexable")
		(extension com.apple.sandbox.application-group)
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
		(require-not (subpath-prefix "${FRONT_USER_HOME}")))
	(require-all
		(extension-class "com.apple.quicklook.readonly")
		(entitlement-is-bool-true com.apple.security.ts.daemon-container)
		(extension com.apple.sandbox.container))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(require-not (subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(literal "/private/var/")
						(extension com.apple.sandbox.application-group)
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))))
	(require-all
		(extension-class "com.apple.nsurlsessiond.readonly")
		(signing-identifier "com.apple.geoanalyticsd")
		(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")))
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(signing-identifier "com.apple.cameracaptured")
		(require-not (extension com.apple.mediaserverd.read)))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(require-not (subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(literal "/private/var/")
						(extension com.apple.sandbox.application-group)
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(literal "/private/var/")
				(extension com.apple.sandbox.application-group)
				(require-any
					(require-all
						(entitlement-is-present com.apple.security.ts.system-tmpdir)
						(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
					(require-all
						(entitlement-is-present com.apple.security.ts.tmpdir)
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
								(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
								(subpath "/private/var/containers/Bundle")
								(subpath "/Developer/Applications")
								(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
								(subpath "/Applications"))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(entitlement-is-bool-true com.apple.security.ts.daemon-container)
										(extension com.apple.sandbox.container))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-only)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.home-relative-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))
									(require-all
										(extension com.apple.security.exception.files.absolute-path.read-write)
										(entitlement-is-bool-true com.apple.security.ts.play-media))))))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(extension com.apple.security.exception.files.absolute-path.read-write))
							(require-all
								(extension com.apple.assets.read)
								(require-any
									(require-all
										(subpath "/private/var/MobileAsset")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
									(require-all
										(subpath-prefix "${HOME}/Library/Assets")
										(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.nsurlsessiond.readonly")
		(entitlement-is-bool-true com.apple.security.network.client)
		(extension com.apple.sandbox.executable))
	(require-all
		(signing-identifier "com.apple.ClarityBoard")
		(literal "/private/var/")
		(subpath-prefix "${HOME}")
		(require-any
			(require-all
				(extension-class "com.apple.quicklook.readonly")
				(require-not (regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-not (regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")))
			(require-all
				(extension-class "com.apple.usernotifications.attachments.read-only")
				(require-not (regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")))))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
						(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
						(subpath "/private/var/containers/Bundle")
						(subpath "/Developer/Applications")
						(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
						(subpath "/Applications"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(entitlement-is-bool-true com.apple.security.ts.daemon-container)
								(extension com.apple.sandbox.container))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-only)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.home-relative-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))
							(require-all
								(extension com.apple.security.exception.files.absolute-path.read-write)
								(entitlement-is-bool-true com.apple.security.ts.play-media))))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.daemon-container)
						(extension com.apple.sandbox.container))
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.play-media))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
					(require-all
						(extension com.apple.security.exception.files.absolute-path.read-write)
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(extension com.apple.security.exception.files.home-relative-path.read-only)
						(extension com.apple.security.exception.files.absolute-path.read-only)
						(extension com.apple.security.exception.files.home-relative-path.read-write)
						(extension com.apple.security.exception.files.absolute-path.read-write))
					(require-all
						(extension com.apple.assets.read)
						(require-any
							(require-all
								(subpath "/private/var/MobileAsset")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
							(require-all
								(subpath-prefix "${HOME}/Library/Assets")
								(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)))))))))
(deny file-link
	(require-not (subpath-prefix "${HOME}/Library/Application Support/com.apple.FaceTime/VideoMessaging/Outbox"))
	(require-all
		(signing-identifier "com.apple.announced")
		(require-all (require-not (subpath "/private/var/tmp/com.apple.announced"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.announced"))))
	(require-all
		(signing-identifier "com.apple.usernotificationsd")
		(require-all (require-not (subpath "/private/var/tmp/com.apple.usernotificationsd"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.usernotificationsd")))
		(require-not (subpath-prefix "${HOME}/Library/UserNotifications")))
	(require-all
		(signing-identifier "com.apple.Carousel")
		(require-all (require-not (subpath "/private/var/tmp/com.apple.Carousel"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.Carousel")))
		(require-not (subpath-prefix "${HOME}/Library/Logs/Brook"))
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor")
		(require-not (subpath-prefix "${FRONT_USER_HOME}")))
	(require-all
		(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
		(signing-identifier "com.apple.FTLivePhotoService")
		(require-not (extension com.apple.app-sandbox.read))
		(require-not (extension com.apple.app-sandbox.read-write)))
	(require-all
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(signing-identifier "com.apple.FTLivePhotoService")
		(require-not (extension com.apple.app-sandbox.read))
		(require-not (extension com.apple.app-sandbox.read-write))))
(deny file-map-executable
	(require-all
		(signing-identifier "com.apple.audiomxd")
		(require-not (subpath "/Library/Audio/Plug-Ins"))))
(deny file-read*
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(signing-identifier "com.apple.nanophoned")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$"))
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync")))
					(require-all
						(signing-identifier "com.apple.tursd")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$"))
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync")))
					(require-all
						(signing-identifier "com.apple.audiomxd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]audiomxd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_")))
					(require-all
						(signing-identifier "com.apple.airplayd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]airplayd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_")))
					(require-all
						(signing-identifier "com.apple.videocodecd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]videocodecd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_")))
					(require-all
						(signing-identifier "com.apple.mediaplaybackd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]mediaplaybackd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_")))))
			(require-all
				(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$")
				(subpath-prefix "${HOME}")
				(require-not (signing-identifier "com.apple.mediaartworkd"))
				(signing-identifier "com.apple.siriknowledged")
				(extension com.apple.tcc.kTCCServiceMediaLibrary)
				(require-any
					(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal"))
					(require-all
						(vnode-type DIRECTORY)
						(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$")))))
			(require-all
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.siriknowledged")
				(extension com.apple.tcc.kTCCServiceMediaLibrary)
				(require-any
					(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal"))
					(require-all
						(vnode-type DIRECTORY)
						(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$")))))))
	(require-all
		(signing-identifier "com.apple.wapic")
		(require-not (literal)))
	(require-all
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
		(require-not (signing-identifier "com.apple.videocodecd")))
	(require-all
		(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
		(require-not (signing-identifier "com.apple.managedappdistributiond"))
		(require-not (signing-identifier "com.apple.storekitd")))
	(require-all
		(signing-identifier "com.apple.tursd")
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs"))
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs"))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
		(require-all (require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
	(require-all
		(subpath "/private/var/containers/Bundle")
		(require-not (signing-identifier "com.apple.managedappdistributiond"))
		(require-not (signing-identifier "com.apple.storekitd")))
	(require-all
		(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
		(require-not (signing-identifier "com.apple.managedappdistributiond"))
		(require-not (signing-identifier "com.apple.storekitd")))
	(require-all
		(signing-identifier "com.apple.storagedatad")
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist"))
		(literal "/private/var/")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")))
	(require-all
		(subpath "/Developer/Applications")
		(require-not (signing-identifier "com.apple.managedappdistributiond"))
		(require-not (signing-identifier "com.apple.storekitd")))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(signing-identifier "com.apple.managedappdistributiond")
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$")))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$")))))
			(require-all
				(signing-identifier "com.apple.storekitd")
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$")))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$")))))))
	(require-all
		(subpath "/Applications")
		(require-not (signing-identifier "com.apple.managedappdistributiond"))
		(require-not (signing-identifier "com.apple.storekitd")))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/TapToRadar/Attachments/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/WebExtensions/Extensions[UNSUPPORTED]plist")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Preferences/com[UNSUPPORTED]apple[UNSUPPORTED]mobilesafari[UNSUPPORTED]plist"))
		(require-not (signing-identifier "com.apple.storagedatad")))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(require-any (subpath-prefix "${FRONT_USER_HOME}/Library/Notes")
(subpath-prefix "${FRONT_USER_HOME}/Library/Voicemail"))
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(subpath "/private/var/wireless/Library/Logs")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(require-any (subpath-prefix "${FRONT_USER_HOME}/Media/iTunes_Control")
(subpath-prefix "${FRONT_USER_HOME}/Media/Books")
(subpath-prefix "${FRONT_USER_HOME}/Media/Downloads")
(subpath-prefix "${FRONT_USER_HOME}/Media/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/Mail")
(subpath-prefix "${FRONT_USER_HOME}/Library/Passes")
(subpath-prefix "${FRONT_USER_HOME}/Library/Health")
(subpath-prefix "${FRONT_USER_HOME}/Library/Contacts")
(subpath-prefix "${FRONT_USER_HOME}/Library/AddressBook")
(subpath-prefix "${FRONT_USER_HOME}/Library/SMS")
(subpath-prefix "${FRONT_USER_HOME}/Library/Safari")
(subpath-prefix "${FRONT_USER_HOME}/Library/Reminders")
(subpath-prefix "${FRONT_USER_HOME}/Library/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoPhotos")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoMailKit"))
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/Library/Logs")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(subpath "/private/var/log")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(subpath "/private/var/tmp/powerlog")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}/powerlog")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(subpath "/private/var/logs")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(literal "/private/var/")
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-any
							(require-all
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))))
					(require-all
						(subpath-prefix "${HOME}")
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-any
							(require-all
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))
							(require-all
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))))))))
	(require-all
		(signing-identifier "com.apple.nanophoned")
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs"))
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs"))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
		(require-all (require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist")
						(require-not (signing-identifier "com.apple.storagedatad")))))
			(require-all
				(subpath-prefix "${HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist")
						(require-not (signing-identifier "com.apple.storagedatad")))))))
	(require-all
		(signing-identifier "com.apple.mDNSResponderHelper")
		(require-not (literal)))
	(require-all
		(signing-identifier "com.apple.privacyaccountingctl")
		(literal "/dev/ttys")
		(require-not (regex #"^/dev/ttys[0-9]" #"^/dev/ttys[0-9]+")))
	(require-all
		(literal "/private/var/")
		(extension com.apple.sandbox.container-proxy)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))))
			(require-all
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
				(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-any
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))))))
	(require-all
		(signing-identifier "com.apple.cloudpaird")
		(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
	(require-all
		(signing-identifier "com.apple.CoreDevice.dtfilesandboxd")
		(require-not (extension com.apple.sandbox.application-group))
		(literal "/private/var/")
		(extension com.apple.sandbox.container)
		(require-any
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")))
			(require-all
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")))))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
		(require-not (signing-identifier "com.apple.chronod")))
	(require-all
		(literal "/private/var/")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
		(require-not (signing-identifier "com.apple.chronod")))
	(require-all
		(debug-mode)
		(literal "/mach.")
		(require-not (process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
	(require-all
		(signing-identifier "com.apple.siriknowledged")
		(literal "/private/var/")
		(extension com.apple.sandbox.container)
		(require-any
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$")))
			(require-all
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$")))))
	(require-all
		(signing-identifier "com.apple.anomalydetectiond")
		(require-any
			(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond"))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond")))
			(require-all
				(vnode-type DIRECTORY)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond")))))
	(require-all
		(signing-identifier "com.apple.announced")
		(require-all (require-not (subpath "/private/var/tmp/com.apple.announced"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.announced"))))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Caches/")
(regex #"com[UNSUPPORTED]apple[UNSUPPORTED]metalassetupgrader/?")
(regex #"[UNSUPPORTED]+/com[UNSUPPORTED]apple[UNSUPPORTED]metal/?"))
		(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
	(require-all
		(signing-identifier "com.apple.gpsd")
		(require-all (require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/gpsd"))
(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/gpsd"))))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
					(require-all
						(regex #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))))))
	(require-all
		(signing-identifier "com.apple.dmd")
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/StoreKit/?"))
		(literal "/private/var/")
		(require-any
			(require-all
				(extension com.apple.sandbox.container)
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$")))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit$")))))
			(require-all
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/StoreKit$")))))
	(require-all
		(signing-identifier "com.apple.momentsd")
		(require-any
			(require-all (require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd"))
(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd")))
			(require-all
				(vnode-type DIRECTORY)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd")))))
	(require-all
		(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?")
		(require-not (signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(signing-identifier "com.apple.security.KeychainDBMover")
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Keychains")))
	(require-all
		(literal "/private/var/")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")
		(require-not (signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(signing-identifier "com.apple.mediaplaybackd")
		(require-not (extension com.apple.mediaserverd.read-write))
		(require-not (extension com.apple.mediaserverd.read)))
	(require-all
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
		(require-not (signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(debug-mode)
		(signing-identifier "com.apple.audiomxd")
		(literal)
		(require-not (subpath-prefix "${FRONT_USER_HOME}/tmp"))
		(require-not (subpath "/private/var/tmp")))
	(require-all
		(debug-mode)
		(signing-identifier "com.apple.audiomxd")
		(literal)
		(require-not (subpath-prefix "${FRONT_USER_HOME}/tmp"))
		(require-not (subpath "/private/var/tmp")))
	(require-all
		(signing-identifier "com.apple.cameracaptured")
		(require-not (extension com.apple.mediaserverd.read-write))
		(require-not (extension com.apple.mediaserverd.read)))
	(require-all
		(signing-identifier "com.apple.geoanalyticsd")
		(require-any
			(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd"))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd")))
			(require-all
				(vnode-type DIRECTORY)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd")))))
	(require-all
		(signing-identifier "com.apple.linkd")
		(require-all (require-not (subpath "/AppleInternal/Applications"))
(require-not (subpath "/System/Developer/Applications"))
(require-not (subpath "/private/var/personalized_debug/Applications"))
(require-not (subpath "/private/var/personalized_automation/Applications"))
(require-not (regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?"))
(require-not (regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?")))
		(require-not (subpath "/private/var/containers/Bundle"))
		(require-not (subpath "/Developer/Applications"))
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle"))
		(require-not (subpath "/Applications")))
	(require-all
		(extension com.apple.mediaserverd.read-write)
		(require-not (signing-identifier "com.apple.audiomxd"))
		(require-not (signing-identifier "com.apple.airplayd")))
	(require-all
		(extension com.apple.mediaserverd.read)
		(require-not (signing-identifier "com.apple.audiomxd"))
		(require-not (signing-identifier "com.apple.airplayd")))
	(require-all
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
		(require-not (signing-identifier "com.apple.airplayd")))
	(require-all
		(signing-identifier "com.apple.audiomxd")
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")))
	(require-all
		(extension com.apple.sandbox.application-group)
		(require-any
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple.")
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(require-all (require-not (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/"))
(require-not (subpath-prefix "${ENTITLEMENT:com.apple.security.ts.nano-paired-storage.subpath.read-only}"))
(require-not (literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.ts.nano-preference.read-only}")))
		(require-all (require-not (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/"))
(require-not (subpath-prefix "${ENTITLEMENT:com.apple.security.ts.nano-paired-storage.subpath.read-write}"))
(require-not (literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.ts.nano-preference.read-write}")))
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.network.client)
				(require-any
					(require-all
						(process-attribute is-apple-signed-executable)
						(require-not (literal "/private/var/preferences/com.apple.networkextension.uuidcache.plist")))
					(require-all
						(require-not (literal "/private/var/preferences/com.apple.networkd.plist"))
						(require-not (literal "/private/var/Managed Preferences/mobile/com.apple.SystemConfiguration.plist"))
						(require-not (literal "/private/var/preferences/com.apple.security.plist"))
						(require-not (literal "/private/var/db/com.apple.networkextension.tracker-info"))
						(require-not (literal "/private/var/preferences/com.apple.NetworkStatistics.plist"))
						(require-not (literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.nsurlstoragedresources/Library/dafsaData.bin"))
						(entitlement-is-present com.apple.private.networkextension.configuration)
						(require-not (literal "/private/var/preferences/com.apple.networkextension.plist")))))
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")))))
			(require-all
				(literal "/private/var/preferences/com.apple.networkextension.uuidcache.plist")
				(process-attribute is-apple-signed-executable)
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(literal "/private/var/preferences/com.apple.networkextension.plist")
				(entitlement-is-present com.apple.private.networkextension.configuration)
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.front-user-home-literal.read-only)
				(literal-prefix "${FRONT_USER_HOME}"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(require-any (subpath-prefix "${HOME}/Library/Application Support/Ubiquity/genstore")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/Ubiquity/genstore/?"))
						(extension com.apple.librarian.ubiquity-revision))
					(require-all
						(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(subpath-prefix "${FRONT_USER_HOME}"))
					(require-all
						(extension com.apple.librarian.ubiquity-container)
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(subpath-prefix "${FRONT_USER_HOME}"))))
			(require-all
				(literal "/private/var/preferences/com.apple.networkd.plist")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(literal "/private/var/Managed Preferences/mobile/com.apple.SystemConfiguration.plist")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/iCloudDrive/[UNSUPPORTED]+/session/r/?")
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(extension com.apple.clouddocs.version))
			(require-all
				(literal "/private/var/preferences/com.apple.security.plist")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(extension com.apple.clouddocs.version))
			(require-all
				(subpath-prefix "${HOME}/Library/Application Support/CloudDocs/session/r")
				(vnode-type REGULAR-FILE)
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(extension com.apple.clouddocs.version))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.location-services)
				(subpath-prefix "${FRONT_USER_HOME}/Library/Carrier Bundles/Overlay"))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/CloudDocs/session/r/?")
				(vnode-type REGULAR-FILE)
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(extension com.apple.clouddocs.version))
			(require-all
				(literal "/private/var/db/com.apple.networkextension.tracker-info")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.render-images)
				(subpath-prefix "${HOME}/Library/Fonts"))
			(require-all
				(literal "/private/var/preferences/com.apple.NetworkStatistics.plist")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.lockdown-service)
				(literal "/private/var/preferences/com.apple.security.plist"))
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.read-factory-files)
				(require-any (subpath "/private/var/hardware/FactoryData")
(literal "/usr/standalone/firmware/apticket.der"))
				(subpath "/private/preboot"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.read-any-bundle)
				(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
				(subpath "/private/var/containers/Bundle")
				(subpath "/Developer/Applications")
				(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
				(subpath "/Applications"))
			(require-all
				(literal "/System/Library/Carrier Bundles/")
				(regex #"^/System/Library/Carrier Bundles//carrier[.]plist$" #"^/System/Library/Carrier Bundles/.+/carrier[.]plist$")
				(entitlement-is-bool-true com.apple.security.ts.location-services))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/Carrier Bundles//carrier[.]plist$" #"^/private/var/mobile/Library/Carrier Bundles/.+/carrier[.]plist$" #"^/private/var/euser[0-9]+/Library/Carrier Bundles/.*/carrier[.]plist$" #"^/private/var/[-0-9A-F]+/Library/Carrier Bundles/.*/carrier[.]plist$" #"^/private/var/Users/[^/]+/Library/Carrier Bundles/.*/carrier[.]plist$")
				(subpath-prefix "${FRONT_USER_HOME}")
				(entitlement-is-bool-true com.apple.security.ts.location-services))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Preferences/com.apple.carrier.plist")
				(entitlement-is-bool-true com.apple.security.ts.location-services))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file)
				(subpath-prefix "${FRONT_USER_HOME}/Library/IdentityServices")
				(extension com.apple.identityservices.deliver))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.location-services)
				(require-any
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Library/Carrier Bundles/[.]png$" #"^/private/var/mobile/Library/Carrier Bundles/.+[.]png$" #"^/private/var/euser[0-9]+/Library/Carrier Bundles/.*[.]png$" #"^/private/var/[-0-9A-F]+/Library/Carrier Bundles/.*[.]png$" #"^/private/var/Users/[^/]+/Library/Carrier Bundles/.*[.]png$")
						(subpath-prefix "${FRONT_USER_HOME}"))
					(require-all
						(literal "/System/Library/Carrier Bundles/")
						(regex #"^/System/Library/Carrier Bundles/[.]png$" #"^/System/Library/Carrier Bundles/.+[.]png$"))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.geoservices)
				(literal-prefix "${ANY_USER_HOME}/Library/Caches/GeoServices/tguid.bin"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.addressbook)
				(subpath-prefix "${HOME}/Library/Fonts")
				(entitlement-is-bool-true com.apple.Contacts.database-allow)
				(extension com.apple.tcc.kTCCServiceAddressBook)
				(subpath-prefix "${HOME}/Library/AddressBook/Delegates")
				(subpath-prefix "${HOME}/Library/AddressBook")
				(literal-prefix "${HOME}/Library/Preferences/com.apple.mobilephone.speeddial.plist"))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/")
				(subpath-prefix "${FRONT_USER_HOME}")
				(entitlement-is-bool-true com.apple.security.ts.geoservices))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/Library/Caches/GeoServices")
				(entitlement-is-bool-true com.apple.security.ts.geoservices))
			(require-all
				(subpath "/private/var/containers/Data/System/com.apple.geod")
				(entitlement-is-bool-true com.apple.security.ts.geoservices))
			(require-all
				(uid 0)
				(vnode-type CHARACTER-DEVICE)
				(entitlement-is-bool-true com.apple.security.ts.bpf)
				(literal "/dev/bpf"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(extension com.apple.sandbox.container))
			(require-all
				(extension com.apple.assets.read)
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
						(subpath "/private/var/MobileAsset")
						(subpath-prefix "${HOME}/Library/Assets"))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.asset-access)
						(subpath "/private/var/MobileAsset")
						(subpath-prefix "${HOME}/Library/Assets")))))))
(deny file-read-data
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(require-not (extension com.apple.revisiond.revision)))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.revisiond-client)
				(require-any
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(require-not (extension com.apple.revisiond.revision)))))))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(require-not (extension com.apple.revisiond.revision)))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.revisiond-client)
				(require-any
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(require-not (extension com.apple.revisiond.revision)))))))
	(require-all
		(vnode-type SYMLINK)
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(require-not (extension com.apple.revisiond.revision)))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.revisiond-client)
				(require-any
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(require-not (extension com.apple.revisiond.revision))))))))
(deny file-read-metadata
	(require-all
		(require-not (literal-prefix "${HOME}"))
		(require-not (literal-prefix "${HOME}/Library/Preferences"))
		(require-any
			(require-all
				(vnode-type DIRECTORY)
				(require-any
					(require-all
						(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
						(require-not (process-attribute is-apple-signed-executable)))
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (process-attribute is-apple-signed-executable)))))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
				(require-not (process-attribute is-apple-signed-executable)))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-not (process-attribute is-apple-signed-executable)))
			(require-all
				(signing-identifier "com.apple.videocodecd")
				(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")))
			(require-all
				(signing-identifier "com.apple.usernotificationsd")
				(require-not (literal-prefix "${HOME}/Library/PPTDevice")))
			(require-all
				(signing-identifier "com.apple.tursd")
				(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs"))
				(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync"))
				(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
			(require-all
				(literal "/private/var/")
				(require-any
					(require-all
						(signing-identifier "com.apple.tursd")
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))
					(require-all
						(subpath "/private/var/wireless/Library/Logs")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(subpath "/private/var/log")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(subpath "/private/var/tmp/powerlog")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(subpath "/private/var/logs")
						(require-not (signing-identifier "com.apple.storagedatad")))))
			(require-all
				(require-any (subpath-prefix "${FRONT_USER_HOME}/Library/Notes")
(subpath-prefix "${FRONT_USER_HOME}/Library/Voicemail"))
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(require-any (subpath-prefix "${FRONT_USER_HOME}/Media/iTunes_Control")
(subpath-prefix "${FRONT_USER_HOME}/Media/Books")
(subpath-prefix "${FRONT_USER_HOME}/Media/Downloads")
(subpath-prefix "${FRONT_USER_HOME}/Media/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/Mail")
(subpath-prefix "${FRONT_USER_HOME}/Library/Passes")
(subpath-prefix "${FRONT_USER_HOME}/Library/Health")
(subpath-prefix "${FRONT_USER_HOME}/Library/Contacts")
(subpath-prefix "${FRONT_USER_HOME}/Library/AddressBook")
(subpath-prefix "${FRONT_USER_HOME}/Library/SMS")
(subpath-prefix "${FRONT_USER_HOME}/Library/Safari")
(subpath-prefix "${FRONT_USER_HOME}/Library/Reminders")
(subpath-prefix "${FRONT_USER_HOME}/Library/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoPhotos")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoMailKit"))
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(vnode-type DIRECTORY)
				(require-any
					(require-all
						(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
						(require-not (signing-identifier "com.apple.nanophoned")))
					(require-all
						(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
						(require-not (signing-identifier "com.apple.nanophoned")))
					(require-all
						(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
						(require-not (signing-identifier "com.apple.nanophoned")))))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/Library/Logs")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(signing-identifier "com.apple.nanophoned")
				(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs"))
				(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync"))
				(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}/powerlog")
				(require-not (signing-identifier "com.apple.storagedatad")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-not (signing-identifier "com.apple.nanophoned")))
			(require-all
				(literal "/private/var/")
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-any
							(require-all
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))))
					(require-all
						(subpath-prefix "${HOME}")
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
						(require-not (signing-identifier "com.apple.storagedatad")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-any
							(require-all
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))
							(require-all
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+")
								(require-not (signing-identifier "com.apple.storagedatad")))))))
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
			(require-all
				(literal-prefix "${HOME}/Library/PPTDevice")
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService")))
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
				(require-not (signing-identifier "com.apple.anomalydetectiond")))
			(require-all
				(literal-prefix "${HOME}/Library/Caches")
				(require-not (signing-identifier "com.apple.anomalydetectiond"))
				(require-not (signing-identifier "com.apple.momentsd")))
			(require-all
				(signing-identifier "com.apple.mediaplaybackd")
				(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(require-not (signing-identifier "com.apple.geoanalyticsd")))
			(require-all
				(require-any (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")
(subpath-prefix "${HOME}/Library/com.apple.momentsd"))
				(require-not (signing-identifier "com.apple.momentsd")))
			(require-all
				(literal-prefix "${HOME}/Library/Caches")
				(require-not (signing-identifier "com.apple.geoanalyticsd")))
			(require-all
				(require-any (signing-identifier "com.apple.airplayd")
(signing-identifier "com.apple.audiomxd"))
				(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")))
			(require-all
				(literal-prefix "${HOME}")
				(require-not (signing-identifier "com.apple.siri.context.service"))
				(require-not (signing-identifier "com.apple.GameController.gamecontrollerd"))
				(require-not (signing-identifier "com.apple.assistantd"))
				(require-all (require-not (signing-identifier "com.apple.storagedatad"))
(require-not (signing-identifier "com.apple.bookdatastored"))
(require-not (signing-identifier "com.apple.desktopservices.desktopserviceshelper"))
(require-not (signing-identifier "com.apple.CloudDocsDaemon.container-metadata-extractor")))
				(require-not (signing-identifier "com.apple.sociallayerd"))
				(require-not (signing-identifier "com.apple.installcoordinationd"))
				(require-not (entitlement-is-bool-true com.apple.security.ts.geoservices))
				(require-not (entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
				(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity))
				(require-not (entitlement-is-bool-true com.apple.security.network.client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.render-images))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
				(require-not (entitlement-is-bool-true com.apple.security.ts.cloudkit-client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.play-media))
				(require-not (entitlement-is-bool-true com.apple.security.ts.framebuffer-access))
				(require-not (entitlement-is-bool-true com.apple.security.ts.asset-access))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
				(require-not (entitlement-is-bool-true com.apple.security.ts.addressbook))
				(require-not (entitlement-is-bool-true com.apple.security.ts.location-services)))
			(require-all
				(signing-identifier "com.apple.facetimemessagestored")
				(require-not (literal-prefix "${HOME}/Library/PPTDevice")))
			(require-all
				(literal-prefix "${HOME}/Library/Preferences")
				(require-not (signing-identifier "com.apple.siri.context.service"))
				(require-not (signing-identifier "com.apple.GameController.gamecontrollerd"))
				(require-not (signing-identifier "com.apple.assistantd"))
				(require-all (require-not (signing-identifier "com.apple.storagedatad"))
(require-not (signing-identifier "com.apple.bookdatastored"))
(require-not (signing-identifier "com.apple.desktopservices.desktopserviceshelper"))
(require-not (signing-identifier "com.apple.CloudDocsDaemon.container-metadata-extractor")))
				(require-not (signing-identifier "com.apple.sociallayerd"))
				(require-not (signing-identifier "com.apple.installcoordinationd"))
				(require-not (entitlement-is-bool-true com.apple.security.ts.geoservices))
				(require-not (entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
				(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity))
				(require-not (entitlement-is-bool-true com.apple.security.network.client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.render-images))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
				(require-not (entitlement-is-bool-true com.apple.security.ts.cloudkit-client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.play-media))
				(require-not (entitlement-is-bool-true com.apple.security.ts.framebuffer-access))
				(require-not (entitlement-is-bool-true com.apple.security.ts.asset-access))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
				(require-not (entitlement-is-bool-true com.apple.security.ts.addressbook))
				(require-not (entitlement-is-bool-true com.apple.security.ts.location-services)))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-not (literal-prefix "${HOME}/Library/Mobile Documents"))
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents"))
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library"))
				(require-not (literal-prefix "${HOME}/Library")))
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(require-not (subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(vnode-type DIRECTORY)
				(require-any
					(require-all
						(literal-prefix "${HOME}/Library/Mobile Documents")
						(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity)))
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents")
						(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity)))
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.ubiquity)
						(require-any
							(require-all
								(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
								(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
								(literal "/private/var/")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
								(require-not (subpath-prefix "${FRONT_USER_HOME}")))
							(require-all
								(extension com.apple.librarian.ubiquity-container)
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
								(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
								(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
								(literal "/private/var/")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
								(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(extension com.apple.revisiond.revision)
						(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity)))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-not (literal-prefix "${HOME}/Library/Mobile Documents"))
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents"))
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
						(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(extension com.apple.librarian.ubiquity-container)
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
						(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.ubiquity)
						(extension com.apple.revisiond.staging)
						(require-all (require-not (subpath "/private/var/.DocumentRevisions-V100/staging"))
(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
(require-not (subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(extension com.apple.revisiond.revision)
						(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity)))))
			(require-all
				(vnode-type DIRECTORY)
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.ubiquity)
						(extension com.apple.revisiond.staging)
						(require-all (require-not (subpath "/private/var/.DocumentRevisions-V100/staging"))
(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
(require-not (subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(extension com.apple.revisiond.revision)
						(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity)))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.location-services)
				(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Carrier Bundles")))
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(require-not (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)
				(require-not (extension com.apple.sandbox.container)))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-all (require-not (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}"))))
			(require-all
				(literal-prefix "${HOME}/Library/PPTDevice")
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file)))
			(require-all
				(vnode-type SYMLINK)
				(require-any
					(require-all
						(entitlement-is-bool-true com.apple.security.ts.ubiquity)
						(extension com.apple.revisiond.staging)
						(require-all (require-not (subpath "/private/var/.DocumentRevisions-V100/staging"))
(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
(require-not (subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(extension com.apple.revisiond.revision)
						(require-not (entitlement-is-bool-true com.apple.security.ts.ubiquity)))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.revisiond-client)
				(require-any
					(require-all
						(vnode-type REGULAR-FILE)
						(require-any
							(require-all
								(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
								(extension com.apple.revisiond.staging))
							(require-all
								(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
								(extension com.apple.revisiond.revision))))
					(require-all
						(vnode-type DIRECTORY)
						(require-any
							(require-all
								(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
								(extension com.apple.revisiond.staging))
							(require-all
								(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
								(extension com.apple.revisiond.revision))))
					(require-all
						(vnode-type SYMLINK)
						(require-any
							(require-all
								(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
								(extension com.apple.revisiond.staging))
							(require-all
								(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
								(extension com.apple.revisiond.revision)))))))))
(deny file-read-xattr
	(require-all
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
		(require-not (signing-identifier "com.apple.mediaplaybackd"))
		(require-not (signing-identifier "com.apple.videocodecd"))
		(require-all (require-not (signing-identifier "com.apple.airplayd"))
(require-not (signing-identifier "com.apple.audiomxd")))))
(deny file-unmount
	(require-all
		(signing-identifier "com.apple.diskimagesiod")
		(file-attribute removable-media)))
(deny file-write*
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(signing-identifier "com.apple.audiomxd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]audiomxd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_")))
					(require-all
						(signing-identifier "com.apple.airplayd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]airplayd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_")))
					(require-all
						(signing-identifier "com.apple.videocodecd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]videocodecd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_")))
					(require-all
						(signing-identifier "com.apple.mediaplaybackd")
						(require-not (regex #"^/private/var/mobile/Library/Logs/CrashReporter/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]mediaplaybackd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_")))
					(require-all
						(signing-identifier "com.apple.nanophoned")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync")))
					(require-all
						(signing-identifier "com.apple.tursd")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync")))))
			(require-all
				(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$")
				(subpath-prefix "${HOME}")
				(require-not (signing-identifier "com.apple.mediaartworkd"))
				(signing-identifier "com.apple.siriknowledged")
				(extension com.apple.tcc.kTCCServiceMediaLibrary)
				(require-any
					(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal"))
					(require-all
						(vnode-type DIRECTORY)
						(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$")))))
			(require-all
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.siriknowledged")
				(extension com.apple.tcc.kTCCServiceMediaLibrary)
				(require-any
					(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal"))
					(require-all
						(vnode-type DIRECTORY)
						(require-not (regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$")))))))
	(require-all
		(signing-identifier "com.apple.privacyaccountingctl")
		(literal "/dev/ttys")
		(require-not (regex #"^/dev/ttys[0-9]" #"^/dev/ttys[0-9]+")))
	(require-all
		(signing-identifier "com.apple.nanophoned")
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs"))
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(signing-identifier "com.apple.managedappdistributiond")
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$")))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$")))))
			(require-all
				(signing-identifier "com.apple.storekitd")
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$")))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$")))))))
	(require-all
		(signing-identifier "com.apple.nanophoned")
		(require-all (require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
	(require-all
		(signing-identifier "com.apple.tursd")
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs"))
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")))
	(require-all
		(signing-identifier "com.apple.tursd")
		(require-all (require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal"))
(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
		(require-not (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
	(require-all
		(literal "/private/var/")
		(extension com.apple.sandbox.container-proxy)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))))
			(require-all
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
				(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-any
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+")
						(require-not (signing-identifier "com.apple.CoreDevice.dtfileserviced")))))))
	(require-all
		(signing-identifier "com.apple.cloudpaird")
		(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
		(require-not (signing-identifier "com.apple.chronod")))
	(require-all
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(require-not (signing-identifier "com.apple.chronod")))
	(require-all
		(signing-identifier "com.apple.anomalydetectiond")
		(require-any
			(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond"))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond")))
			(require-all
				(vnode-type DIRECTORY)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond")))))
	(require-all
		(signing-identifier "com.apple.announced")
		(require-all (require-not (subpath "/private/var/tmp/com.apple.announced"))
(require-not (subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.announced"))))
	(require-all
		(signing-identifier "com.apple.gpsd")
		(require-all (require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/gpsd"))
(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/gpsd"))))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Caches/")
(regex #"com[UNSUPPORTED]apple[UNSUPPORTED]metalassetupgrader/?")
(regex #"[UNSUPPORTED]+/com[UNSUPPORTED]apple[UNSUPPORTED]metal/?"))
		(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
					(require-all
						(regex #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))))
			(require-all
				(signing-identifier "com.apple.dmd")
				(literal "/private/var/")
				(extension com.apple.sandbox.container)
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$")))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$")))))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$")
						(require-not (signing-identifier "com.apple.MTLAssetUpgraderD")))))))
	(require-all
		(signing-identifier "com.apple.momentsd")
		(require-any
			(require-all (require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd"))
(require-not (subpath-prefix "${HOME}/Library/com.apple.momentsd")))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd")))
			(require-all
				(vnode-type DIRECTORY)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd")))))
	(require-all
		(signing-identifier "com.apple.security.KeychainDBMover")
		(require-not (subpath-prefix "${FRONT_USER_HOME}/Library/Keychains")))
	(require-all
		(signing-identifier "com.apple.geoanalyticsd")
		(require-any
			(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd"))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd")))
			(require-all
				(vnode-type DIRECTORY)
				(require-not (subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd")))))
	(require-all
		(extension com.apple.mediaserverd.read-write)
		(require-not (signing-identifier "com.apple.cameracaptured"))
		(require-all (require-not (signing-identifier "com.apple.airplayd"))
(require-not (signing-identifier "com.apple.audiomxd"))))
	(require-all
		(signing-identifier "com.apple.mediaplaybackd")
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
		(require-not (extension com.apple.mediaserverd.read-write))
		(literal "/private/var/")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(require-not (regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")))
	(require-all
		(extension com.apple.sandbox.application-group)
		(require-any
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple.")
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(require-all (require-not (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/"))
(require-not (subpath-prefix "${ENTITLEMENT:com.apple.security.ts.nano-paired-storage.subpath.read-write}"))
(require-not (literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.ts.nano-preference.read-write}")))
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(vnode-type REGULAR-FILE)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(vnode-type DIRECTORY)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
						(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(vnode-type SYMLINK)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(require-not (extension com.apple.revisiond.staging)))
					(require-all
						(extension com.apple.librarian.ubiquity-container)
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
						(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.revisiond-client)
				(require-any
					(require-all
						(vnode-type REGULAR-FILE)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))
					(require-all
						(vnode-type DIRECTORY)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))
					(require-all
						(vnode-type SYMLINK)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))))
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.geoservices)
				(literal-prefix "${ANY_USER_HOME}/Library/Caches/GeoServices/tguid.bin"))
			(require-all
				(entitlement-is-bool-true com.apple.Contacts.database-allow)
				(entitlement-is-bool-true com.apple.security.ts.addressbook)
				(extension com.apple.tcc.kTCCServiceAddressBook)
				(require-any
					(subpath-prefix "${HOME}/Library/AddressBook/Delegates")
					(require-all
						(vnode-type REGULAR-FILE)
						(literal-prefix "${HOME}/Library/AddressBook/"))))
			(require-all
				(extension com.apple.sandbox.container)
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)))))
(deny file-write-create
	(vnode-type DIRECTORY)
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
				(require-not (signing-identifier "com.apple.nanophoned"))
				(require-not (signing-identifier "com.apple.tursd")))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
				(require-not (signing-identifier "com.apple.nanophoned"))
				(require-not (signing-identifier "com.apple.tursd")))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
				(require-not (signing-identifier "com.apple.nanophoned"))
				(require-not (signing-identifier "com.apple.tursd")))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
				(require-not (process-attribute is-apple-signed-executable))
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(signing-identifier "com.apple.nanophoned")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))
					(require-all
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
						(require-not (process-attribute is-apple-signed-executable))
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}"))
					(require-all
						(signing-identifier "com.apple.tursd")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))))
			(require-all
				(literal-prefix "${HOME}/Library/Caches")
				(require-not (signing-identifier "com.apple.geoanalyticsd"))
				(require-all (require-not (signing-identifier "com.apple.momentsd"))
(require-not (signing-identifier "com.apple.anomalydetectiond"))))))
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(subpath "/private/var/tmp")
				(require-all (require-not (signing-identifier "com.apple.usernotificationsd"))
(require-not (signing-identifier "com.apple.facetimemessagestored")))
				(require-not (signing-identifier "com.apple.Carousel"))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService"))))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(require-all (require-not (signing-identifier "com.apple.usernotificationsd"))
(require-not (signing-identifier "com.apple.facetimemessagestored")))
				(require-not (signing-identifier "com.apple.Carousel"))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService"))))))
	(require-all
		(literal "/private/var/tmp/AudioCapture")
		(vnode-type SYMLINK)
		(require-any
			(require-all
				(debug-mode)
				(require-not (signing-identifier "com.apple.audiomxd")))
			(require-all
				(debug-mode)
				(require-not (signing-identifier "com.apple.audiomxd")))))
	(require-all
		(require-any (literal-prefix "${PROCESS_TEMP_DIR}/AudioCapture")
(literal-prefix "${FRONT_USER_HOME}/tmp/AudioCapture"))
		(vnode-type SYMLINK)
		(require-any
			(require-all
				(debug-mode)
				(require-not (signing-identifier "com.apple.audiomxd")))
			(require-all
				(debug-mode)
				(require-not (signing-identifier "com.apple.audiomxd")))))
	(require-all
		(literal "/private/var/")
		(extension com.apple.sandbox.application-group)
		(require-any
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/Library$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/Library/Preferences$"))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/Library$" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/Library/Preferences$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/Library(/Preferences)?$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/Library(/Preferences)?$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/Library(/Preferences)?$"))))
	(require-all
		(entitlement-is-bool-true com.apple.security.network.client)
		(literal-prefix "${HOME}/Library/Logs/CrashReporter/CFNetwork_"))
	(require-all
		(vnode-type DIRECTORY)
		(entitlement-is-bool-true com.apple.security.ts.ubiquity)
		(require-not (literal-prefix "${HOME}/Library/Mobile Documents"))
		(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents"))))
(deny file-write-data
	(require-all
		(literal)
		(require-not (signing-identifier "com.apple.wapic"))
		(require-not (signing-identifier "com.apple.mDNSResponderHelper"))))
(deny file-write-mode
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(signing-identifier "com.apple.nanophoned")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))
					(require-all
						(signing-identifier "com.apple.tursd")
						(require-not (regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))
					(require-all
						(signing-identifier "com.apple.nanophoned")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync"))
					(require-all
						(signing-identifier "com.apple.tursd")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync"))
					(require-all
						(signing-identifier "com.apple.audiomxd")
						(regex #"^/private/var/mobile/Library/Logs/CrashReporter/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]audiomxd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_"))
					(require-all
						(signing-identifier "com.apple.airplayd")
						(regex #"^/private/var/mobile/Library/Logs/CrashReporter/airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]airplayd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]airplayd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])airplayd_"))
					(require-all
						(signing-identifier "com.apple.videocodecd")
						(regex #"^/private/var/mobile/Library/Logs/CrashReporter/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]videocodecd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_"))
					(require-all
						(signing-identifier "com.apple.mediaplaybackd")
						(regex #"^/private/var/mobile/Library/Logs/CrashReporter/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]mediaplaybackd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_"))))
			(require-all
				(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaartworkd")
				(signing-identifier "com.apple.siriknowledged")
				(extension com.apple.tcc.kTCCServiceMediaLibrary)
				(require-any
					(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal")
					(require-all
						(vnode-type DIRECTORY)
						(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$"))))
			(require-all
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.siriknowledged")
				(extension com.apple.tcc.kTCCServiceMediaLibrary)
				(require-any
					(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal")
					(require-all
						(vnode-type DIRECTORY)
						(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$"))))))
	(require-all
		(signing-identifier "com.apple.privacyaccountingctl")
		(literal "/dev/ttys")
		(regex #"^/dev/ttys[0-9]" #"^/dev/ttys[0-9]+"))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(signing-identifier "com.apple.managedappdistributiond")
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$"))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$"))))
			(require-all
				(signing-identifier "com.apple.storekitd")
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$"))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/euser[0-9]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit/" #"^/private/var/Users/[^/]+/Containers/(((Temp/)?Data/[^/]+/[^/]+|Data/[^/]+/[^/]+/Library/Caches)|Temp/Data/[^/]+/[^/]+/Library/Caches)/StoreKit$"))))))
	(require-all
		(signing-identifier "com.apple.nanophoned")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs"))
	(require-all
		(signing-identifier "com.apple.nanophoned")
		(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm"))
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal")
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync"))
	(require-all
		(literal "/private/var/")
		(extension com.apple.sandbox.container-proxy)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+")
						(signing-identifier "com.apple.CoreDevice.dtfileserviced"))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
						(signing-identifier "com.apple.CoreDevice.dtfileserviced"))))
			(require-all
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+")
				(signing-identifier "com.apple.CoreDevice.dtfileserviced"))
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-any
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
						(signing-identifier "com.apple.CoreDevice.dtfileserviced"))
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+")
						(signing-identifier "com.apple.CoreDevice.dtfileserviced"))))))
	(require-all
		(signing-identifier "com.apple.tursd")
		(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm"))
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal")
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync"))
	(require-all
		(signing-identifier "com.apple.cloudpaird")
		(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird"))
	(require-all
		(signing-identifier "com.apple.tursd")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs"))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.chrono/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData"))
		(signing-identifier "com.apple.chronod"))
	(require-all
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]chrono$")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(signing-identifier "com.apple.chronod"))
	(require-all
		(signing-identifier "com.apple.anomalydetectiond")
		(require-any
			(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
			(require-all
				(vnode-type REGULAR-FILE)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond"))))
	(require-all
		(signing-identifier "com.apple.announced")
		(require-any (subpath "/private/var/tmp/com.apple.announced")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.announced")))
	(require-all
		(signing-identifier "com.apple.gpsd")
		(require-any (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/gpsd")
(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/gpsd")))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Caches/")
(regex #"com[UNSUPPORTED]apple[UNSUPPORTED]metalassetupgrader/?")
(regex #"[UNSUPPORTED]+/com[UNSUPPORTED]apple[UNSUPPORTED]metal/?"))
		(signing-identifier "com.apple.MTLAssetUpgraderD"))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))
					(require-all
						(regex #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))))
			(require-all
				(signing-identifier "com.apple.dmd")
				(literal "/private/var/")
				(extension com.apple.sandbox.container)
				(require-any
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$"))
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$"))))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))))))
	(require-all
		(signing-identifier "com.apple.momentsd")
		(require-any
			(require-any (subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")
(subpath-prefix "${HOME}/Library/com.apple.momentsd"))
			(require-all
				(vnode-type REGULAR-FILE)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd"))))
	(require-all
		(signing-identifier "com.apple.security.KeychainDBMover")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Keychains"))
	(require-all
		(extension com.apple.mediaserverd.read-write)
		(signing-identifier "com.apple.cameracaptured")
		(require-any (signing-identifier "com.apple.airplayd")
(signing-identifier "com.apple.audiomxd")))
	(require-all
		(signing-identifier "com.apple.geoanalyticsd")
		(require-any
			(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
			(require-all
				(vnode-type REGULAR-FILE)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd"))))
	(require-all
		(signing-identifier "com.apple.mediaplaybackd")
		(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?")
		(extension com.apple.mediaserverd.read-write)
		(literal "/private/var/")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Temp/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/(Temp/)?Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$"))
	(require-all
		(extension com.apple.sandbox.application-group)
		(require-any
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple.")
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(require-any (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/")
(subpath-prefix "${ENTITLEMENT:com.apple.security.ts.nano-paired-storage.subpath.read-write}")
(literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.ts.nano-preference.read-write}"))
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(vnode-type REGULAR-FILE)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))
					(require-all
						(vnode-type DIRECTORY)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))
					(require-all
						(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(subpath-prefix "${FRONT_USER_HOME}"))
					(require-all
						(vnode-type SYMLINK)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))
					(require-all
						(extension com.apple.librarian.ubiquity-container)
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(subpath-prefix "${FRONT_USER_HOME}"))))
			(require-all
				(extension com.apple.sandbox.application-group)
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/")
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.revisiond-client)
				(require-any
					(require-all
						(vnode-type REGULAR-FILE)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))
					(require-all
						(vnode-type DIRECTORY)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))
					(require-all
						(vnode-type SYMLINK)
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/staging/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging"))
						(extension com.apple.revisiond.staging))))
			(require-all
				(entitlement-is-present com.apple.security.ts.system-tmpdir)
				(subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.system-tmpdir}"))
			(require-all
				(entitlement-is-present com.apple.security.ts.tmpdir)
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.geoservices)
				(literal-prefix "${ANY_USER_HOME}/Library/Caches/GeoServices/tguid.bin"))
			(require-all
				(entitlement-is-bool-true com.apple.Contacts.database-allow)
				(entitlement-is-bool-true com.apple.security.ts.addressbook)
				(extension com.apple.tcc.kTCCServiceAddressBook)
				(require-any
					(subpath-prefix "${HOME}/Library/AddressBook/Delegates")
					(require-all
						(vnode-type REGULAR-FILE)
						(literal-prefix "${HOME}/Library/AddressBook/"))))
			(require-all
				(extension com.apple.sandbox.container)
				(entitlement-is-bool-true com.apple.security.ts.daemon-container)))))
(deny file-write-setugid)
(deny file-write-unlink
	(entitlement-is-present com.apple.private.oop-jit.loader)
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(require-any (signing-identifier "com.apple.usernotificationsd")
(signing-identifier "com.apple.facetimemessagestored"))
				(require-not (subpath "/private/var/tmp"))
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}")))
			(require-all
				(signing-identifier "com.apple.Carousel")
				(require-not (subpath "/private/var/tmp"))
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}")))
			(require-all
				(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))
				(require-not (subpath "/private/var/tmp"))
				(require-not (subpath-prefix "${PROCESS_TEMP_DIR}")))))
	(require-all
		(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file)
		(subpath-prefix "${FRONT_USER_HOME}/Library/IdentityServices")
		(require-not (extension com.apple.identityservices.deliver)))
	(require-all
		(extension com.apple.sandbox.oopjit)
		(require-not (subpath "/private/var/OOPJit"))))
(deny file-write-xattr
	(xattr "com.apple.metadata:com_apple_backup_excludeItem"))
(deny iokit-open-user-client
	(require-all
		(require-not (extension com.apple.security.exception.iokit-user-client-class))
		(require-any
			(require-all
				(iokit-user-client-class "AppleKeyStoreUserClient")
				(require-not (entitlement-is-bool-true com.apple.security.network.client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.mobile-keybag-access)))
			(require-all
				(iokit-user-client-class "IOMobileFramebufferUserClient")
				(require-not (entitlement-is-bool-true com.apple.security.ts.render-images))
				(require-not (entitlement-is-bool-true com.apple.security.ts.framebuffer-access))
				(require-not (entitlement-is-bool-true com.apple.security.ts.addressbook)))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ane-client)
				(require-all (require-not (iokit-user-client-class "H11ANEInDirectPathClient"))
(require-not (iokit-user-client-class "AppleVirtIONeuralEngineDeviceUserClient")))
				(iokit-user-client-class "ANEClientHintsUserClient")
				(require-not (entitlement-is-bool-true com.apple.private.ane.allow-set-client-hints)))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.render-images)
				(require-not (iokit-user-client-class "AppleJPEGDriverUserClient"))
				(require-not (iokit-user-client-class "IOSurfaceAcceleratorClient"))
				(require-not (iokit-user-client-class "AGXDevice"))
				(require-not (iokit-user-client-class "IOSurfaceRootUserClient")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.addressbook)
				(require-not (iokit-user-client-class "AppleJPEGDriverUserClient"))
				(require-not (iokit-user-client-class "IOSurfaceAcceleratorClient"))
				(require-not (iokit-user-client-class "AGXDevice"))
				(require-not (iokit-user-client-class "IOSurfaceRootUserClient")))
			(require-all
				(iokit-user-client-class "RootDomainUserClient")
				(require-all (require-not (signing-identifier "com.apple.usernotificationsd"))
(require-not (signing-identifier "com.apple.facetimemessagestored")))
				(require-not (signing-identifier "com.apple.Carousel"))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService")))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.power-assertions)))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal)
				(require-not (iokit-user-client-class "IOGPUDeviceUserClient"))
				(require-all (require-not (iokit-user-client-class "IOAccelDevice2"))
(require-not (iokit-user-client-class "IOAccelContext2"))
(require-not (iokit-user-client-class "IOAccelSharedUserClient2")))
				(require-not (iokit-user-client-class "AGXCommandQueue"))
				(require-all (require-not (iokit-user-client-class "IOAccelDevice"))
(require-not (iokit-user-client-class "IOAccelContext"))
(require-not (iokit-user-client-class "IOAccelSubmitter2"))
(require-not (iokit-user-client-class "IOAccelSharedUserClient")))
				(require-not (iokit-user-client-class "AGXSharedUserClient"))
				(require-not (iokit-user-client-class "AGXDevice"))
				(require-all (require-not (iokit-connection "IOGPU"))
(require-not (iokit-connection "IOGraphicsAccelerator2"))))
			(require-all
				(iokit-user-client-class "AppleKeyStoreUserClient")
				(entitlement-is-bool-true com.apple.security.ts.addressbook)))))
(deny iokit-open-service
	(require-all
		(require-not (entitlement-is-present com.apple.security.exception.iokit-user-client-class))
		(require-any
			(require-all
				(iokit-user-client-class "AppleKeyStore")
				(require-not (entitlement-is-bool-true com.apple.security.network.client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.mobile-keybag-access)))
			(require-all
				(require-any (iokit-user-client-class "H11ANEIn")
(iokit-user-client-class "AppleVirtIONeuralEngineDevice"))
				(require-not (entitlement-is-bool-true com.apple.security.ts.ane-client)))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.addressbook)
				(require-not (iokit-user-client-class "AppleJPEGDriver"))
				(require-not (iokit-user-client-class "IOSurfaceRoot")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.framebuffer-access)
				(require-not (iokit-user-client-class "AGXAcceleratorG"))
				(require-all (require-not (iokit-user-client-class "AppleCLCD"))
(require-not (iokit-user-client-class "AppleParavirtDisplay")))
				(require-not (iokit-user-client-class "AppleParavirtGPU")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.render-images)
				(require-not (iokit-user-client-class "AppleJPEGDriver"))
				(require-not (iokit-user-client-class "AGXAcceleratorG"))
				(require-not (iokit-user-client-class "IOSurfaceRoot"))
				(require-all (require-not (iokit-user-client-class "AppleCLCD"))
(require-not (iokit-user-client-class "AppleParavirtDisplay")))
				(require-not (iokit-user-client-class "AppleParavirtGPU")))
			(require-all
				(iokit-user-client-class "IOPMrootDomain")
				(require-all (require-not (signing-identifier "com.apple.usernotificationsd"))
(require-not (signing-identifier "com.apple.facetimemessagestored")))
				(require-not (signing-identifier "com.apple.Carousel"))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService")))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
				(require-not (entitlement-is-bool-true com.apple.security.ts.identity-services-client))
				(require-not (entitlement-is-bool-true com.apple.security.ts.power-assertions)))
			(require-all
				(iokit-user-client-class "AGXAcceleratorG")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(require-any (iokit-user-client-class "AppleCLCD")
(iokit-user-client-class "AppleParavirtDisplay"))
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(iokit-user-client-class "AppleParavirtGPU")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(iokit-user-client-class "AppleKeyStore")
				(entitlement-is-bool-true com.apple.security.ts.addressbook)))))
(deny iokit-set-properties
	(require-all
		(signing-identifier "com.apple.thermalmonitord")
		(require-not (iokit-user-client-class "AppleVTempDispatcher"))
		(require-any
			(require-all
				(iokit-user-client-class "IOPMPowerSource")
				(require-not (iokit-property "AppleChargeRateLimitIndex"))
				(require-not (iokit-property "DeviceOpenedByEventSystem")))
			(require-all
				(iokit-property "AppleARMPerformanceControllerDVDFactor")
				(iokit-user-client-class "ApplePMGR"))
			(require-all
				(iokit-property "lts-ctrl-0-")
				(iokit-user-client-class "ApplePMPv2"))
			(require-all
				(require-any (iokit-property "GPUMaxPower")
(iokit-property "CameraStrobeMaxLoad")
(iokit-property "EnableBatteryAgingModel")
(iokit-property "BaselineSystemCapability")
(iokit-property "UseBaselineSystemCapability")
(iokit-property "LifetimeServoDieTemperatureTargetPropertyKey"))
				(require-any (iokit-user-client-class "ApplePMP")
(iokit-user-client-class "ApplePPM")
(iokit-user-client-class "AppleDieTempController")))
			(require-all
				(iokit-user-client-class "AGXAcceleratorG")
				(require-all (require-not (iokit-property "AbsoluteTarget"))
(require-not (iokit-property "SetMaxGPUAbsolutePower"))
(require-not (iokit-property "LifetimeServoFastDieTemperatureTarget"))))
			(require-all
				(iokit-user-client-class "AppleCLPC")
				(require-all (require-not (iokit-property "`cpu-avg-power-target-w2r"))
(require-not (iokit-property "`cpu-avg-limiter-input-w2r"))
(require-not (iokit-property "`gpu-avg-power-target-w2r"))
(require-not (iokit-property "`pkg-hip-power-target"))
(require-not (iokit-property "`pkg-low-power-target"))
(require-not (iokit-property "`pkg-avg-therm-power-target"))
(require-not (iokit-property "`pkg-power-zone-metric-w2r-0"))
(require-not (iokit-property "`pkg-power-split-cpu-fraction"))))))
	(require-all
		(signing-identifier "com.apple.SoundBoard")
		(require-not (iokit-user-client-class "IOHIDEventServiceUserClient"))
		(iokit-user-client-class "IOPMrootDomain")
		(require-all (require-not (iokit-property "System Boot Complete"))
(require-not (iokit-property "System Idle Seconds"))
(require-not (iokit-property "System Idle Milliseconds"))))
	(require-all
		(iokit-property "DeviceOpenedByEventSystem")
		(iokit-user-client-class "AppleMultitouchDevice")
		(require-not (signing-identifier "com.apple.SoundBoard"))
		(require-any
			(require-all
				(signing-identifier "com.apple.audiomxd")
				(require-any
					(require-all
						(iokit-property "voice-trigger-configuration")
						(iokit-user-client-class "com_apple_audio_IOBorealisOwlUserClient"))
					(require-all
						(iokit-property "exclusive access owner")
						(iokit-user-client-class "IOAudio2Device"))
					(require-all
						(iokit-property "Enable")
						(iokit-user-client-class "AppleHDMIPortControl"))
					(require-all
						(iokit-property "System Latency")
						(require-any (iokit-user-client-class "AppleEARCAudio")
(iokit-user-client-class "AppleSiI9437Audio")))
					(require-all
						(iokit-property "kPropertyConfiguration")
						(iokit-user-client-class "AppleAOPVoiceTriggerUserClient"))))
			(require-all
				(iokit-property "exclusive access owner")
				(iokit-user-client-class "IOAudio2Device")
				(signing-identifier "com.apple.darwinaudiod"))
			(require-all
				(iokit-property "BondManagement")
				(iokit-user-client-class "AppleEmbeddedBluetoothDeviceManagement")
				(signing-identifier "com.apple.BTLEServer"))
			(require-all
				(iokit-property "kAppleI2CEthernetLomEnable")
				(iokit-user-client-class "AppleI2CEthernetAquantiaControllerBSD")
				(signing-identifier "com.apple.lightsoutmanagementd"))
			(require-all
				(iokit-user-client-class "IOHIDLibUserClient")
				(signing-identifier "com.apple.GameController.gamecontrollerd")
				(require-all (require-not (iokit-property "IOHIDDeviceForceInterfaceRematch"))
(require-not (iokit-property "GameControllerSupportedHIDDevice"))))
			(require-all
				(iokit-user-client-class "IOPMrootDomain")
				(signing-identifier "com.apple.SurfBoard")
				(require-all (require-not (iokit-property "System Boot Complete"))
(require-not (iokit-property "System Idle Seconds"))
(require-not (iokit-property "System Idle Milliseconds"))))))
	(require-all
		(require-not (signing-identifier "com.apple.SoundBoard"))
		(require-any
			(require-all
				(signing-identifier "com.apple.audiomxd")
				(require-any
					(require-all
						(iokit-property "voice-trigger-configuration")
						(iokit-user-client-class "com_apple_audio_IOBorealisOwlUserClient"))
					(require-all
						(iokit-property "exclusive access owner")
						(iokit-user-client-class "IOAudio2Device"))
					(require-all
						(iokit-property "Enable")
						(iokit-user-client-class "AppleHDMIPortControl"))
					(require-all
						(iokit-property "System Latency")
						(require-any (iokit-user-client-class "AppleEARCAudio")
(iokit-user-client-class "AppleSiI9437Audio")))
					(require-all
						(iokit-property "kPropertyConfiguration")
						(iokit-user-client-class "AppleAOPVoiceTriggerUserClient"))))
			(require-all
				(iokit-property "exclusive access owner")
				(iokit-user-client-class "IOAudio2Device")
				(signing-identifier "com.apple.darwinaudiod"))
			(require-all
				(iokit-property "BondManagement")
				(iokit-user-client-class "AppleEmbeddedBluetoothDeviceManagement")
				(signing-identifier "com.apple.BTLEServer"))
			(require-all
				(iokit-property "kAppleI2CEthernetLomEnable")
				(iokit-user-client-class "AppleI2CEthernetAquantiaControllerBSD")
				(signing-identifier "com.apple.lightsoutmanagementd"))
			(require-all
				(iokit-user-client-class "IOHIDLibUserClient")
				(signing-identifier "com.apple.GameController.gamecontrollerd")
				(require-all (require-not (iokit-property "IOHIDDeviceForceInterfaceRematch"))
(require-not (iokit-property "GameControllerSupportedHIDDevice"))))
			(require-all
				(iokit-user-client-class "IOPMrootDomain")
				(signing-identifier "com.apple.SurfBoard")
				(require-all (require-not (iokit-property "System Boot Complete"))
(require-not (iokit-property "System Idle Seconds"))
(require-not (iokit-property "System Idle Milliseconds"))))))
	(require-all
		(signing-identifier "com.apple.SoundBoard")
		(require-any
			(require-all
				(iokit-user-client-class "MiniDisplayDriver")
				(require-all (require-not (iokit-property "RegisterLUTData"))
(require-not (iokit-property "RegisterLUTInfo"))))
			(require-all
				(iokit-user-client-class "AppleARMBacklight")
				(require-all (require-not (iokit-property "LogLevel"))
(require-not (iokit-property "CompensationTweak"))
(require-not (iokit-property "brightness-nits"))
(require-not (iokit-property "brightness-nits-cap"))
(require-not (iokit-property "DisplayBrightness"))
(require-not (iokit-property "DisplayBrightnessNitsNVRAM"))
(require-not (iokit-property "DisplayBrightnessSliderPosition"))))))
	(require-all
		(iokit-user-client-class "ApplePeppyUserClient")
		(iokit-property "OOBFlag")
		(require-not (signing-identifier "com.apple.SoundBoard"))
		(require-any
			(require-all
				(signing-identifier "com.apple.audiomxd")
				(require-any
					(require-all
						(iokit-property "voice-trigger-configuration")
						(iokit-user-client-class "com_apple_audio_IOBorealisOwlUserClient"))
					(require-all
						(iokit-property "exclusive access owner")
						(iokit-user-client-class "IOAudio2Device"))
					(require-all
						(iokit-property "Enable")
						(iokit-user-client-class "AppleHDMIPortControl"))
					(require-all
						(iokit-property "System Latency")
						(require-any (iokit-user-client-class "AppleEARCAudio")
(iokit-user-client-class "AppleSiI9437Audio")))
					(require-all
						(iokit-property "kPropertyConfiguration")
						(iokit-user-client-class "AppleAOPVoiceTriggerUserClient"))))
			(require-all
				(iokit-property "exclusive access owner")
				(iokit-user-client-class "IOAudio2Device")
				(signing-identifier "com.apple.darwinaudiod"))
			(require-all
				(iokit-property "BondManagement")
				(iokit-user-client-class "AppleEmbeddedBluetoothDeviceManagement")
				(signing-identifier "com.apple.BTLEServer"))
			(require-all
				(iokit-property "kAppleI2CEthernetLomEnable")
				(iokit-user-client-class "AppleI2CEthernetAquantiaControllerBSD")
				(signing-identifier "com.apple.lightsoutmanagementd"))
			(require-all
				(iokit-user-client-class "IOHIDLibUserClient")
				(signing-identifier "com.apple.GameController.gamecontrollerd")
				(require-all (require-not (iokit-property "IOHIDDeviceForceInterfaceRematch"))
(require-not (iokit-property "GameControllerSupportedHIDDevice"))))
			(require-all
				(iokit-user-client-class "IOPMrootDomain")
				(signing-identifier "com.apple.SurfBoard")
				(require-all (require-not (iokit-property "System Boot Complete"))
(require-not (iokit-property "System Idle Seconds"))
(require-not (iokit-property "System Idle Milliseconds")))))))
(deny ipc-posix-sem*
	(require-all
		(require-not (ipc-posix-name ""))
		(require-not (extension com.apple.sandbox.application-group))
		(require-any
			(require-all
				(ipc-posix-name "purplebuddy.sentinel")
				(require-all (require-not (signing-identifier "com.apple.SoundBoard"))
(require-not (signing-identifier "com.apple.ClarityBoard")))
				(signing-identifier "com.apple.SurfBoard"))
			(require-all
				(ipc-posix-name "installcood.f.")
				(signing-identifier "com.apple.managedappdistributiond")))))
(deny ipc-posix-sem-create
	(require-all
		(ipc-posix-name "purplebuddy.sentinel")
		(require-all (require-not (signing-identifier "com.apple.SoundBoard"))
(require-not (signing-identifier "com.apple.ClarityBoard")))
		(require-not (signing-identifier "com.apple.SurfBoard"))))
(deny ipc-posix-shm*
	(require-not (extension com.apple.sandbox.application-group))
	(require-all
		(ipc-posix-name-regex #"/FBW[0-9]:com[UNSUPPORTED]apple[UNSUPPORTED]frontboard[UNSUPPORTED]syst")
		(require-not (signing-identifier "com.apple.SurfBoard")))
	(require-all
		(ipc-posix-name "AppleABL.")
		(require-not (signing-identifier "com.apple.audiomxd")))
	(require-all
		(ipc-posix-name "com.apple.bgst.backup")
		(require-not (signing-identifier "com.apple.dasd"))))
(deny ipc-posix-shm-read-data
	(require-all
		(require-not (ipc-posix-name ""))
		(require-any
			(require-all
				(ipc-posix-name-regex #"/FBW[0-9]:com.apple.frontboard.syst")
				(require-all (require-not (signing-identifier "com.apple.SoundBoard"))
(require-not (signing-identifier "com.apple.ClarityBoard")))
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(ipc-posix-name "/com.apple.AppSSO.version")
				(require-not (entitlement-is-bool-true com.apple.security.network.client))
				(require-not (entitlement-is-bool-true com.apple.security.network.server)))
			(require-all
				(ipc-posix-name "apple.shm.notification_center")
				(entitlement-is-bool-true com.apple.security.on-demand-install-capable)))))
(deny ipc-posix-shm-write*
	(require-all
		(ipc-posix-name-regex #"/FBW[0-9]:com.apple.frontboard.syst")
		(require-all (require-not (signing-identifier "com.apple.SoundBoard"))
(require-not (signing-identifier "com.apple.ClarityBoard")))
		(require-not (signing-identifier "com.apple.Carousel"))))
(deny job-creation
	(require-not (signing-identifier "com.apple.security.cryptexd")))
(deny mach-issue-extension
	(require-all
		(extension-class "com.apple.media-device-discovery.logging")
		(require-any
			(require-all
				(global-name "com.apple.logd.events")
				(signing-identifier "com.apple.deviceaccessd"))
			(require-all
				(global-name "com.apple.logd")
				(signing-identifier "com.apple.deviceaccessd")))))
(deny mach-lookup
	(require-all
		(require-not (global-name "com.apple.lsd.openurl"))
		(require-not (global-name "com.apple.pairedsyncd.syncstate"))
		(require-not (global-name "com.apple.nano.nanoregistry.paireddeviceregistry"))
		(require-not (global-name "com.apple.tccd"))
		(require-not (global-name "com.apple.lsd.advertisingidentifiers"))
		(require-not (extension com.apple.sandbox.application-group))
		(require-not (extension com.apple.security.exception.mach-lookup.global-name))
		(require-not (extension com.apple.security.exception.mach-lookup.local-name))
		(require-any
			(global-name "com.apple.ckdiscretionaryd.debug")
			(require-any (global-name "com.apple.cloudd.debug")
(global-name "com.apple.cloudkit.partlycloudd.debug"))
			(xpc-service-name "com.apple.WebKit.")
			(xpc-service-name "com.apple.CoreGraphics.CGPDFService")
			(xpc-service-name-regex #".+")
			(require-all
				(entitlement-is-bool-true com.apple.security.network.client)
				(require-not (global-name "com.apple.securityd"))
				(require-not (global-name "com.apple.SystemConfiguration.DNSConfiguration"))
				(require-not (global-name "com.apple.networkscored"))
				(require-not (global-name "com.apple.SystemConfiguration.NetworkInformation"))
				(require-not (global-name "com.apple.SystemConfiguration.helper"))
				(require-not (global-name "com.apple.commcenter.xpc"))
				(require-not (global-name "com.apple.SystemConfiguration.configd"))
				(require-not (global-name "com.apple.accountsd.accountmanager"))
				(require-not (global-name "com.apple.GSSCred"))
				(require-not (global-name "com.apple.cfnetwork.cfnetworkagent"))
				(require-not (global-name "com.apple.nehelper"))
				(require-not (global-name "com.apple.nesessionmanager"))
				(require-not (global-name "com.apple.networkserviceproxy.fetch-token"))
				(require-not (global-name "com.apple.dnssd.service"))
				(require-not (global-name "com.apple.usymptomsd"))
				(require-not (global-name "com.apple.trustd"))
				(require-not (global-name "com.apple.SystemConfiguration.PPPController"))
				(require-not (global-name "com.apple.commcenter.cupolicy.xpc"))
				(require-not (global-name "com.apple.nsurlsessiond"))
				(require-not (global-name "com.apple.symptomsd"))
				(require-not (global-name "com.apple.AppSSO.service-xpc"))
				(require-not (global-name "com.apple.symptoms.symptomsd.managed_events"))
				(require-not (global-name "com.apple.networkd"))
				(require-not (global-name "com.apple.cfnetwork.AuthBrokerAgent"))
				(require-not (global-name "com.apple.SystemConfiguration.SCNetworkReachability"))
				(require-any
					(require-all
						(global-name "com.apple.ak.auth.xpc")
						(require-not (process-attribute is-apple-signed-executable))
						(require-not (entitlement-is-bool-true com.apple.authkit.client))
						(require-not (entitlement-is-bool-true com.apple.authkit.client.private))
						(require-not (entitlement-is-bool-true com.apple.authkit.client.internal)))
					(require-all
						(global-name "com.apple.ak.anisette.xpc")
						(require-not (process-attribute is-apple-signed-executable))
						(require-not (entitlement-is-bool-true com.apple.authkit.client))
						(require-not (entitlement-is-bool-true com.apple.authkit.client.private))
						(require-not (entitlement-is-bool-true com.apple.authkit.client.internal)))
					(require-all
						(global-name "com.apple.networkd_privileged")
						(require-not (entitlement-is-bool-true com.apple.networkd.modify_settings))
						(require-not (entitlement-is-bool-true com.apple.networkd.disable_opportunistic))
						(require-not (entitlement-is-bool-true com.apple.networkd.advisory_socket))
						(require-not (entitlement-is-bool-true com.apple.networkd_privileged))
						(require-not (entitlement-is-bool-true com.apple.networkd.persistent_interface)))))
			(require-all
				(signing-identifier "com.apple.usernotificationsd")
				(require-not (global-name "com.apple.powerlog.plxpclogger.xpc"))
				(require-not (global-name "com.apple.iokit.powerdxpc"))
				(require-not (global-name "com.apple.PowerManagement.control")))
			(require-all
				(entitlement-is-present com.apple.security.ts.webkit-client)
				(require-not (xpc-service-name "com.apple.WebKit.WebAuthn"))
				(require-not (xpc-service-name "com.apple.WebKit.GPU"))
				(require-all (require-not (xpc-service-name "com.apple.WebKit.Networking"))
(require-not (xpc-service-name "com.apple.WebKit.WebContent")))
				(require-not (xpc-service-name "com.apple.WebKit.WebContent.CaptivePortal")))
			(require-all
				(global-name "com.apple.marco")
				(require-not (signing-identifier "com.apple.usernotificationsd")))
			(require-all
				(global-name "com.apple.identityservicesd.embedded.auth")
				(require-not (signing-identifier "com.apple.usernotificationsd")))
			(require-all
				(xpc-service-name-regex #".+")
				(require-not (signing-identifier "com.apple.chronod")))
			(require-all
				(global-name "com.apple.medialibraryd.xpc")
				(require-not (signing-identifier "com.apple.siriknowledged")))
			(require-all
				(global-name "com.apple.FileCoordination")
				(require-not (signing-identifier "com.apple.tursd"))
				(require-any
					(require-all
						(global-name "com.apple.FileCoordination")
						(require-not (signing-identifier "com.apple.nanophoned")))
					(require-all
						(global-name "com.apple.awdd")
						(require-not (signing-identifier "com.apple.nanophoned")))))
			(require-all
				(xpc-service-name "com.apple.remotemanagement.")
				(require-not (signing-identifier "com.apple.remotemanagementd"))
				(require-not (signing-identifier "com.apple.RemoteManagementAgent"))
				(require-any
					(require-all
						(signing-identifier "com.apple.diagnosticextensionsd")
						(require-not (b2 00ea 09ad 9cdf)))
					(require-all
						(signing-identifier "com.apple.mlruntimed")
						(require-not (b2 00e9 09af 9cdf)))
					(require-all
						(signing-identifier "com.apple.ManagedSettingsAgent")
						(require-not (b2 00ea 09ad 9cdf)))))
			(require-all
				(global-name "com.apple.awdd")
				(require-not (signing-identifier "com.apple.tursd"))
				(require-any
					(require-all
						(global-name "com.apple.FileCoordination")
						(require-not (signing-identifier "com.apple.nanophoned")))
					(require-all
						(global-name "com.apple.awdd")
						(require-not (signing-identifier "com.apple.nanophoned")))))
			(require-all
				(global-name "com.apple.itunescloudd.xpc")
				(require-not (signing-identifier "com.apple.siriknowledged")))
			(require-all
				(xpc-service-name "com")
				(require-any
					(require-all
						(xpc-service-name "com.apple.")
						(require-any
							(require-all
								(signing-identifier "com.apple.diagnosticextensionsd")
								(require-not (b2 00ea 09ad 9cdf)))
							(require-all
								(signing-identifier "com.apple.ManagedSettingsAgent")
								(require-not (b2 00ea 09ad 9cdf)))))
					(require-all
						(signing-identifier "com.apple.mlruntimed")
						(require-not (b2 00e9 09af 9cdf)))))
			(require-all
				(global-name "com.apple.chrono.event-service.")
				(require-not (signing-identifier "com.apple.chronod")))
			(require-all
				(global-name "com.apple.private.appintents.delegate.")
				(require-not (signing-identifier "com.apple.linkd")))
			(require-all
				(global-name "com.apple.marco")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))
			(require-all
				(global-name "com.apple.identityservicesd.embedded.auth")
				(require-not (signing-identifier "com.apple.facetimemessagestored")))
			(require-all
				(signing-identifier "com.apple.facetimemessagestored")
				(require-not (global-name "com.apple.powerlog.plxpclogger.xpc"))
				(require-not (global-name "com.apple.iokit.powerdxpc"))
				(require-not (global-name "com.apple.PowerManagement.control")))
			(require-all
				(xpc-service-name "com.apple.")
				(require-any
					(require-all
						(xpc-service-name "com.apple.DiagnosticExtensions.")
						(require-not (signing-identifier "com.apple.diagnosticextensionsd")))
					(require-all
						(signing-identifier "com.apple.installcoordinationd")
						(require-not (b2 00e8 7eeb 9cdf)))
					(require-all
						(require-not (signing-identifier "com.apple.assistantd"))
						(require-all (require-not (signing-identifier "com.apple.InputUI"))
(require-not (signing-identifier "com.apple.destinationd"))
(require-not (signing-identifier "com.apple.donotdisturbd"))
(require-not (signing-identifier "com.apple.locationpushd"))
(require-not (signing-identifier "com.apple.symptomsd-diag"))))))
			(require-all
				(signing-identifier "com.apple.Carousel")
				(require-not (global-name "com.apple.powerlog.plxpclogger.xpc"))
				(require-not (global-name "com.apple.iokit.powerdxpc"))
				(require-not (global-name "com.apple.PowerManagement.control")))
			(require-all
				(xpc-service-name-regex #".+")
				(require-not (signing-identifier "com.apple.assistantd"))
				(require-all (require-not (signing-identifier "com.apple.InputUI"))
(require-not (signing-identifier "com.apple.destinationd"))
(require-not (signing-identifier "com.apple.donotdisturbd"))
(require-not (signing-identifier "com.apple.locationpushd"))
(require-not (signing-identifier "com.apple.symptomsd-diag"))))
			(require-all
				(global-name "com.apple.networkscored")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(global-name "com.apple.marco")
				(require-not (signing-identifier "com.apple.Carousel"))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService"))))
			(require-all
				(global-name "com.apple.AppSSO.service-xpc")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.play-media)
				(global-name "com.apple.mediaserverd")
				(global-name "com.apple.coremedia.mediaplaybackd.assetimagegenerator.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.cpeprotector.xpc")
				(global-name "com.apple.coremedia.videocodecd.decompressionsession")
				(global-name "com.apple.coremedia.sandboxserver.xpc")
				(require-any (global-name "com.apple.coremedia.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferaudiorenderer.xpc"))
				(global-name "com.apple.coremedia.videocodecd.decompressionsession.xpc")
				(global-name "com.apple.coremedia.videocodecd.compressionsession")
				(global-name "com.apple.coremedia.videocodecd.compressionsession.xpc")
				(require-any (global-name "com.apple.coremedia.videotarget.xpc")
(global-name "com.apple.coremedia.assetcacheinspector")
(global-name "com.apple.coremedia.mediaplaybackd.videotarget.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.assetcacheinspector.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.player.xpc")
				(require-any (global-name "com.apple.coremedia.routediscoverer.xpc")
(global-name "com.apple.coremedia.volumecontroller.xpc"))
				(global-name "com.apple.audio.AudioSession")
				(require-any (global-name "com.apple.coremedia.samplebufferaudiorenderer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figmetriceventtimeline.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeyboss.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeysession.xpc"))
				(global-name "com.apple.coremedia.routingcontext.xpc")
				(global-name "com.apple.coremedia.figcontentkeysession.xpc")
				(global-name "com.apple.coremedia.mediaparserd.formatreader.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.bytestream.xpc")
				(global-name "com.apple.springboard.backgroundappservices")
				(require-any (global-name "com.apple.coremedia.figcpecryptor")
(global-name "com.apple.coremedia.mediaplaybackd.figcpecryptor.xpc"))
				(global-name "com.apple.coremedia.formatreader.xpc")
				(global-name "com.apple.coremedia.endpoint.xpc")
				(global-name "com.apple.airplay.apsynccontroller.xpc")
				(global-name "com.apple.itunesstored.xpc")
				(global-name "com.apple.coremedia.videocompositor")
				(global-name "com.apple.coremedia.bytestream.xpc")
				(global-name "com.apple.coremedia.systemcontroller.xpc")
				(require-any (global-name "com.apple.timesync.manager")
(global-name "com.apple.timesync.expositor"))
				(global-name "com.apple.coremedia.admin")
				(global-name "com.apple.coremedia.asset.xpc")
				(global-name "com.apple.pegasus")
				(global-name "com.apple.coremedia.mediaplaybackd.customurlloader.xpc")
				(global-name "com.apple.coremedia.visualcontext.xpc")
				(global-name "com.apple.privacyaccountingd")
				(global-name "com.apple.coremedia.mediaplaybackd.visualcontext.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.formatreader.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.asset.xpc")
				(global-name "com.apple.coremedia.sandboxserver")
				(require-any (global-name "com.apple.coremedia.remaker")
(global-name "com.apple.coremedia.mediaplaybackd.remaker.xpc"))
				(global-name "com.apple.timesync.ptp.manager")
				(global-name "com.apple.coremedia.assetimagegenerator.xpc")
				(global-name "com.apple.coremedia.player.xpc")
				(global-name "com.apple.coremedia.externalstoragedevicemanager.xpc")
				(require-any (global-name "com.apple.coremedia.capturesource")
(global-name "com.apple.coremedia.capturesession"))
				(global-name "com.apple.audioanalyticsd")
				(global-name "com.apple.coremedia.customurlloader.xpc")
				(require-any (global-name "com.apple.airplay.endpoint.xpc")
(global-name "com.apple.mediaexperience.endpoint.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.sandboxserver.xpc")
				(global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
				(require-any (global-name "com.apple.coremedia.remotequeue")
(global-name "com.apple.coremedia.audiodeviceclock.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audiodeviceclock.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.videocompositor.xpc")
				(global-name "com.apple.coremedia.sts")
				(global-name "com.apple.itunescloudd.xpc")
				(require-any (global-name "com.apple.coremedia.samplegenerator.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplegenerator.xpc"))
				(require-any (global-name "com.apple.coremedia.cpeprotector.xpc")
(global-name "com.apple.coremedia.routingsessionmanager.xpc"))
				(global-name "com.apple.coremedia.figcontentkeyboss.xpc"))
			(require-all
				(entitlement-is-bool-true com.apple.security.network.server)
				(global-name "com.apple.securityd")
				(global-name "com.apple.SystemConfiguration.DNSConfiguration")
				(global-name "com.apple.SystemConfiguration.NetworkInformation")
				(global-name "com.apple.SystemConfiguration.helper")
				(global-name "com.apple.commcenter.xpc")
				(global-name "com.apple.SystemConfiguration.configd")
				(global-name "com.apple.usymptomsd")
				(global-name "com.apple.trustd")
				(global-name "com.apple.SystemConfiguration.PPPController")
				(global-name "com.apple.commcenter.cupolicy.xpc")
				(global-name "com.apple.symptomsd")
				(global-name "com.apple.symptoms.symptomsd.managed_events")
				(global-name "com.apple.SystemConfiguration.SCNetworkReachability"))
			(require-all
				(process-attribute is-apple-signed-executable)
				(global-name "com.apple.audioanalyticsd")
				(entitlement-is-bool-true com.apple.security.ts.play-audio))
			(require-all
				(global-name "com.apple.identityservicesd.embedded.auth")
				(require-not (signing-identifier "com.apple.Carousel"))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService"))))
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true com.apple.security.ts.render-images))
			(require-all
				(global-name "com.apple.usernotifications.delegate.")
				(require-not (signing-identifier "com.apple.SurfBoard"))
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.power-assertions)
				(global-name "com.apple.powerlog.plxpclogger.xpc")
				(global-name "com.apple.iokit.powerdxpc")
				(global-name "com.apple.PowerManagement.control"))
			(require-all
				(global-name "com.apple.nesessionmanager")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.play-audio)
				(global-name "com.apple.audio.AudioConverterService")
				(global-name "com.apple.audio.AURemoteIOServer")
				(xpc-service-name "com.apple.audio.analytics.service"))
			(require-all
				(global-name "com.apple.powerlog.plxpclogger.xpc")
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService"))))
			(require-all
				(global-name "com.apple.dnssd.service")
				(entitlement-is-bool-true com.apple.security.network.server))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal)
				(require-any (global-name "com.apple.cvmsServ")
(global-name "com.apple.gpumemd.source"))
				(xpc-service-name "com.apple.MTLCompilerService")
				(xpc-service-name "com.apple.AGXCompilerService"))
			(require-all
				(global-name "com.apple.mobile.heartbeat")
				(entitlement-is-bool-true com.apple.security.ts.lockdown-service))
			(require-all
				(global-name "com.apple.iokit.powerdxpc")
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService"))))
			(require-all
				(global-name "com.apple.quicklook.ThumbnailsAgent")
				(entitlement-is-bool-true com.apple.security.ts.ubiquity))
			(require-all
				(global-name "com.apple.securityd")
				(entitlement-is-bool-true com.apple.security.ts.lockdown-service))
			(require-all
				(global-name "com.apple.PowerManagement.control")
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService"))))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(global-name "com.apple.mediaserverd")
				(global-name "com.apple.coremedia.mediaplaybackd.assetimagegenerator.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.cpeprotector.xpc")
				(global-name "com.apple.coremedia.videocodecd.decompressionsession")
				(global-name "com.apple.librariand")
				(global-name "com.apple.coremedia.sandboxserver.xpc")
				(global-name "com.apple.bird")
				(require-any (global-name "com.apple.coremedia.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferaudiorenderer.xpc"))
				(global-name "com.apple.coremedia.videocodecd.decompressionsession.xpc")
				(global-name "com.apple.coremedia.videocodecd.compressionsession")
				(global-name "com.apple.coremedia.videocodecd.compressionsession.xpc")
				(require-any (global-name "com.apple.coremedia.videotarget.xpc")
(global-name "com.apple.coremedia.assetcacheinspector")
(global-name "com.apple.coremedia.mediaplaybackd.videotarget.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.assetcacheinspector.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.player.xpc")
				(require-any (global-name "com.apple.coremedia.routediscoverer.xpc")
(global-name "com.apple.coremedia.volumecontroller.xpc"))
				(global-name "com.apple.FileCoordination")
				(global-name "com.apple.audio.AudioSession")
				(require-any (global-name "com.apple.coremedia.samplebufferaudiorenderer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figmetriceventtimeline.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeyboss.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeysession.xpc"))
				(global-name "com.apple.coremedia.routingcontext.xpc")
				(global-name "com.apple.coremedia.figcontentkeysession.xpc")
				(global-name "com.apple.coremedia.mediaparserd.formatreader.xpc")
				(global-name "com.apple.bird.token")
				(global-name "com.apple.coremedia.mediaplaybackd.bytestream.xpc")
				(global-name "com.apple.springboard.backgroundappservices")
				(require-any (global-name "com.apple.coremedia.figcpecryptor")
(global-name "com.apple.coremedia.mediaplaybackd.figcpecryptor.xpc"))
				(global-name "com.apple.coremedia.formatreader.xpc")
				(global-name "com.apple.coremedia.endpoint.xpc")
				(global-name "com.apple.airplay.apsynccontroller.xpc")
				(global-name "com.apple.itunesstored.xpc")
				(global-name "com.apple.coremedia.videocompositor")
				(global-name "com.apple.FileProvider")
				(global-name "com.apple.coremedia.bytestream.xpc")
				(global-name "com.apple.coremedia.systemcontroller.xpc")
				(require-any (global-name "com.apple.timesync.manager")
(global-name "com.apple.timesync.expositor"))
				(global-name "com.apple.coremedia.admin")
				(global-name "com.apple.coremedia.asset.xpc")
				(global-name "com.apple.pegasus")
				(global-name "com.apple.coremedia.mediaplaybackd.customurlloader.xpc")
				(global-name "com.apple.coremedia.visualcontext.xpc")
				(global-name "com.apple.privacyaccountingd")
				(global-name "com.apple.coremedia.mediaplaybackd.visualcontext.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.formatreader.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.asset.xpc")
				(global-name "com.apple.coremedia.sandboxserver")
				(require-any (global-name "com.apple.coremedia.remaker")
(global-name "com.apple.coremedia.mediaplaybackd.remaker.xpc"))
				(global-name "com.apple.timesync.ptp.manager")
				(global-name "com.apple.coremedia.assetimagegenerator.xpc")
				(global-name "com.apple.coremedia.player.xpc")
				(global-name "com.apple.coremedia.externalstoragedevicemanager.xpc")
				(require-any (global-name "com.apple.coremedia.capturesource")
(global-name "com.apple.coremedia.capturesession"))
				(global-name "com.apple.audioanalyticsd")
				(global-name "com.apple.coremedia.customurlloader.xpc")
				(require-any (global-name "com.apple.airplay.endpoint.xpc")
(global-name "com.apple.mediaexperience.endpoint.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.sandboxserver.xpc")
				(global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
				(require-any (global-name "com.apple.coremedia.remotequeue")
(global-name "com.apple.coremedia.audiodeviceclock.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audiodeviceclock.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.videocompositor.xpc")
				(global-name "com.apple.coremedia.sts")
				(global-name "com.apple.itunescloudd.xpc")
				(require-any (global-name "com.apple.coremedia.samplegenerator.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplegenerator.xpc"))
				(require-any (global-name "com.apple.coremedia.cpeprotector.xpc")
(global-name "com.apple.coremedia.routingsessionmanager.xpc"))
				(global-name "com.apple.coremedia.figcontentkeyboss.xpc"))
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.trustd")
				(entitlement-is-bool-true com.apple.security.ts.lockdown-service))
			(require-all
				(global-name "com.apple.contactsd")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.locationd.spi")
				(entitlement-is-bool-true com.apple.security.ts.location-services))
			(require-all
				(global-name "com.apple.revisiond")
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(entitlement-is-bool-true com.apple.security.ts.revisiond-client))
			(require-all
				(global-name "com.apple.spotlight.IndexDelegateAgent")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.locationd.synchronous")
				(entitlement-is-bool-true com.apple.security.ts.location-services))
			(require-all
				(global-name "com.apple.spotlight.IndexAgent")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.locationd.registration")
				(entitlement-is-bool-true com.apple.security.ts.location-services))
			(require-all
				(global-name "com.apple.identityservicesd.idquery.embedded.auth")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file)
				(global-name "com.apple.powerlog.plxpclogger.xpc")
				(global-name "com.apple.iokit.powerdxpc")
				(global-name "com.apple.PowerManagement.control"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.springboard-services)
				(global-name "com.apple.usernotifications.remotenotificationservice")
				(global-name "com.apple.springboard.backgroundappservices")
				(global-name "com.apple.springboard.services")
				(global-name "com.apple.usernotifications.usernotificationservice")
				(global-name "com.apple.usernotifications.listener"))
			(require-all
				(global-name "com.apple.marco")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file)
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client))
			(require-all
				(global-name "com.apple.accountsd.accountmanager")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.identityservicesd.embedded.auth")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file)
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client))
			(require-all
				(global-name "com.apple.ABDatabaseDoctor")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.powerlog.plxpclogger.xpc")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client))
			(require-all
				(global-name "com.apple.telephonyutilities.callservicesdaemon.callcapabilities")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.iokit.powerdxpc")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client))
			(require-all
				(global-name "com.apple.cmfsyncagent.embedded.auth")
				(entitlement-is-bool-true com.apple.security.ts.addressbook))
			(require-all
				(global-name "com.apple.PowerManagement.control")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client))
			(require-all
				(global-name "com.apple.system.notification_center")
				(entitlement-is-bool-true com.apple.security.on-demand-install-capable))
			(require-all
				(require-any (global-name "com.apple.geod")
(global-name "com.apple.nanomaps.xpc.GeoServices"))
				(entitlement-is-bool-true com.apple.security.ts.geoservices))
			(require-all
				(global-name "com.apple.geoanalyticsd")
				(entitlement-is-bool-true com.apple.security.ts.geoservices))
			(require-all
				(global-name "com.apple.appleneuralengine")
				(entitlement-is-bool-true com.apple.security.ts.ane-client))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.asset-access)
				(global-name "com.apple.mobileasset.autoasset")
				(global-name "com.apple.mobileassetd")
				(global-name "com.apple.mobileassetd.v2"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.cloudkit-client)
				(global-name "com.apple.cloudasset.cloudd")
				(global-name "com.apple.ckdiscretionaryd")
				(global-name "com.apple.cloudd"))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
				(global-name "com.apple.mediaserverd")
				(global-name "com.apple.mobileasset.autoasset")
				(global-name "com.apple.coremedia.mediaplaybackd.assetimagegenerator.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.cpeprotector.xpc")
				(global-name "com.apple.coremedia.videocodecd.decompressionsession")
				(global-name "com.apple.mobileassetd")
				(global-name "com.apple.coremedia.sandboxserver.xpc")
				(require-any (global-name "com.apple.coremedia.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferaudiorenderer.xpc"))
				(global-name "com.apple.coremedia.videocodecd.decompressionsession.xpc")
				(global-name "com.apple.coremedia.videocodecd.compressionsession")
				(global-name "com.apple.coremedia.videocodecd.compressionsession.xpc")
				(require-any (global-name "com.apple.coremedia.videotarget.xpc")
(global-name "com.apple.coremedia.assetcacheinspector")
(global-name "com.apple.coremedia.mediaplaybackd.videotarget.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.assetcacheinspector.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.player.xpc")
				(require-any (global-name "com.apple.coremedia.routediscoverer.xpc")
(global-name "com.apple.coremedia.volumecontroller.xpc"))
				(global-name "com.apple.audio.AudioSession")
				(require-any (global-name "com.apple.coremedia.samplebufferaudiorenderer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figmetriceventtimeline.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeyboss.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeysession.xpc"))
				(global-name "com.apple.coremedia.routingcontext.xpc")
				(global-name "com.apple.mobileassetd.v2")
				(global-name "com.apple.coremedia.figcontentkeysession.xpc")
				(global-name "com.apple.coremedia.mediaparserd.formatreader.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.bytestream.xpc")
				(global-name "com.apple.springboard.backgroundappservices")
				(require-any (global-name "com.apple.coremedia.figcpecryptor")
(global-name "com.apple.coremedia.mediaplaybackd.figcpecryptor.xpc"))
				(global-name "com.apple.coremedia.formatreader.xpc")
				(global-name "com.apple.coremedia.endpoint.xpc")
				(global-name "com.apple.airplay.apsynccontroller.xpc")
				(global-name "com.apple.itunesstored.xpc")
				(global-name "com.apple.coremedia.videocompositor")
				(global-name "com.apple.coremedia.bytestream.xpc")
				(global-name "com.apple.coremedia.systemcontroller.xpc")
				(require-any (global-name "com.apple.timesync.manager")
(global-name "com.apple.timesync.expositor"))
				(global-name "com.apple.coremedia.admin")
				(global-name "com.apple.coremedia.asset.xpc")
				(global-name "com.apple.pegasus")
				(global-name "com.apple.coremedia.mediaplaybackd.customurlloader.xpc")
				(global-name "com.apple.coremedia.visualcontext.xpc")
				(global-name "com.apple.privacyaccountingd")
				(global-name "com.apple.coremedia.mediaplaybackd.visualcontext.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.formatreader.xpc")
				(global-name "com.apple.coremedia.mediaplaybackd.asset.xpc")
				(global-name "com.apple.coremedia.sandboxserver")
				(require-any (global-name "com.apple.coremedia.remaker")
(global-name "com.apple.coremedia.mediaplaybackd.remaker.xpc"))
				(global-name "com.apple.timesync.ptp.manager")
				(global-name "com.apple.coremedia.assetimagegenerator.xpc")
				(global-name "com.apple.coremedia.player.xpc")
				(global-name "com.apple.coremedia.externalstoragedevicemanager.xpc")
				(require-any (global-name "com.apple.coremedia.capturesource")
(global-name "com.apple.coremedia.capturesession"))
				(global-name "com.apple.audioanalyticsd")
				(global-name "com.apple.coremedia.customurlloader.xpc")
				(require-any (global-name "com.apple.airplay.endpoint.xpc")
(global-name "com.apple.mediaexperience.endpoint.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.sandboxserver.xpc")
				(global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
				(require-any (global-name "com.apple.coremedia.remotequeue")
(global-name "com.apple.coremedia.audiodeviceclock.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audiodeviceclock.xpc"))
				(global-name "com.apple.coremedia.mediaplaybackd.videocompositor.xpc")
				(global-name "com.apple.coremedia.sts")
				(global-name "com.apple.itunescloudd.xpc")
				(require-any (global-name "com.apple.coremedia.samplegenerator.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplegenerator.xpc"))
				(require-any (global-name "com.apple.coremedia.cpeprotector.xpc")
(global-name "com.apple.coremedia.routingsessionmanager.xpc"))
				(global-name "com.apple.coremedia.figcontentkeyboss.xpc")))))
(deny mach-priv-task-port
	(require-all
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(deny mach-task-inspect
	(require-all
		(require-not (target self))
		(require-any
			(require-all
				(debug-mode)
				(require-not (process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
			(require-all
				(require-all (require-not (signing-identifier "com.apple.osanalyticshelper"))
(require-not (signing-identifier "com.apple.gputoolsserviced"))
(require-not (signing-identifier "com.apple.gputoolstransportd")))
				(require-not (entitlement-is-bool-true com.apple.security.ts.mach-task-read))))))
(deny mach-task-name
	(require-all
		(require-not (target self))
		(require-not (entitlement-is-bool-true com.apple.security.ts.mach-task-name))
		(require-any
			(require-all
				(debug-mode)
				(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))
			(require-all
				(require-any (signing-identifier "com.apple.osanalyticshelper")
(signing-identifier "com.apple.gputoolsserviced")
(signing-identifier "com.apple.gputoolstransportd"))
				(entitlement-is-bool-true com.apple.security.ts.mach-task-read)))))
(deny network-inbound
	(require-all
		(require-not (entitlement-is-bool-true com.apple.security.network.server))
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
						(require-not (subpath-prefix "${HOME}/Library/Mobile Documents")))
					(require-all
						(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
						(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(extension com.apple.librarian.ubiquity-container)
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))
						(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?"))
						(require-not (subpath-prefix "${HOME}/Library/Mobile Documents"))
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(entitlement-is-bool-true com.apple.security.network.client)
				(entitlement-is-bool-true com.apple.developer.networking.multicast)))))
(deny network-outbound
	(require-all
		(require-not (control-name "com.apple.flow-divert"))
		(require-not (entitlement-is-bool-true com.apple.security.network.client))
		(require-any
			(require-all
				(entitlement-is-bool-true com.apple.security.network.server)
				(require-not (control-name "com.apple.netsrc"))
				(require-not (control-name "com.apple.network.statistics"))
				(require-not (literal "/private/var/run/mDNSResponder")))
			(require-all
				(extension com.apple.sandbox.application-group)
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/"))
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(require-not (subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(require-any
					(require-all
						(extension com.apple.app-sandbox.read-write)
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(subpath-prefix "${HOME}/Library/Mobile Documents"))
					(require-all
						(entitlement-is-bool-true com.apple.private.librarian.container-proxy)
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))
					(require-all
						(extension com.apple.librarian.ubiquity-container)
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
						(subpath-prefix "${HOME}/Library/Mobile Documents")
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))
			(require-all
				(literal "/private/var/run/lockdown/checkin")
				(entitlement-is-bool-true com.apple.security.ts.lockdown-service))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.lockdown-client)
				(literal "/private/var/run/lockdown.sock")))))
(deny nvram-get
	(require-all
		(require-any (nvram-variable "boot-args")
(nvram-variable "obliteration")
(nvram-variable "oblit-begins"))
		(require-not (signing-identifier "com.apple.SoundBoard")))
	(require-all
		(require-any (nvram-variable "OOBF")
(nvram-variable "IONVRAM-FORCESYNCNOW-PROPERTY"))
		(require-not (signing-identifier "com.apple.SoundBoard")))
	(require-all
		(require-not (signing-identifier "com.apple.SoundBoard"))
		(require-any
			(require-all
				(nvram-variable "boot-args")
				(require-not (signing-identifier "com.apple.darwinaudiod")))
			(require-all
				(nvram-variable "StartupMute")
				(require-not (signing-identifier "com.apple.AccessibilityUIServer"))))))
(deny nvram-set
	(require-all
		(nvram-variable "StartupMute")
		(require-not (signing-identifier "com.apple.AccessibilityUIServer")))
	(require-all
		(require-any (nvram-variable "OOBF")
(nvram-variable "IONVRAM-FORCESYNCNOW-PROPERTY"))
		(require-not (signing-identifier "com.apple.SoundBoard"))))
(deny process-exec*
	(require-all
		(process-name "/usr/libexec/thermalmonitord")
		(require-not (debug-mode)))
	(require-all
		(debug-mode)
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))
	(require-all
		(subpath "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework")
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(deny process-fork
	(require-all
		(process-name "/usr/libexec/thermalmonitord")
		(debug-mode)))
(deny process-info-dirtycontrol
	(target others))
(deny process-info-ledger
	(signing-identifier "com.apple.dasd"))
(deny process-info-pidinfo
	(signing-identifier "com.apple.SoundBoard"))
(deny signal
	(require-all
		(require-not (target self))
		(require-any
			(require-all
				(debug-mode)
				(require-not (process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
			(require-all
				(target others)
				(signing-identifier "com.apple.Carousel")))))
(deny syscall-unix
	(require-all
		(syscall-number SYS_csrctl)
		(require-not (signing-identifier "com.apple.nanophoned"))
		(require-not (signing-identifier "com.apple.tursd"))
		(syscall-number SYS_flock)
		(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
	(require-all
		(syscall-number SYS_flock)
		(require-not (signing-identifier "com.apple.nanophoned"))
		(require-not (signing-identifier "com.apple.tursd"))
		(syscall-number SYS_flock)
		(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
	(require-all
		(syscall-number SYS_ftruncate)
		(require-not (signing-identifier "com.apple.nanophoned"))
		(require-not (signing-identifier "com.apple.tursd"))
		(syscall-number SYS_flock)
		(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
	(require-all
		(syscall-number SYS_fsync)
		(require-not (signing-identifier "com.apple.nanophoned"))
		(require-not (signing-identifier "com.apple.tursd"))
		(syscall-number SYS_flock)
		(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
	(require-all
		(syscall-number SYS_guarded_open_dprotected_np)
		(require-not (signing-identifier "com.apple.nanophoned"))
		(require-not (signing-identifier "com.apple.tursd"))
		(syscall-number SYS_flock)
		(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
	(require-all
		(syscall-number SYS___channel_get_info)
		(entitlement-is-bool-true com.apple.security.network.client))
	(require-all
		(syscall-number SYS___channel_get_opt)
		(entitlement-is-bool-true com.apple.security.network.client))
	(require-all
		(syscall-number SYS___channel_open)
		(entitlement-is-bool-true com.apple.security.network.client))
	(require-all
		(syscall-number SYS___channel_set_opt)
		(entitlement-is-bool-true com.apple.security.network.client))
	(require-all
		(syscall-number SYS___channel_sync)
		(entitlement-is-bool-true com.apple.security.network.client)))
(deny sysctl-read
	(require-all
		(sysctl-name "net.statistics")
		(entitlement-is-bool-true com.apple.security.network.server)
		(entitlement-is-bool-true com.apple.security.network.client))
	(require-all
		(sysctl-name "net.routetable.")
		(entitlement-is-bool-true com.apple.security.network.server)
		(entitlement-is-bool-true com.apple.security.network.client))
	(require-all
		(require-any (sysctl-name "kern.nisdomainname")
(sysctl-name "kern.ipc.maxsockbuf"))
		(entitlement-is-bool-true com.apple.security.network.server)
		(entitlement-is-bool-true com.apple.security.network.client))
	(require-all
		(sysctl-name "sysctl.proc_cputype.")
		(require-not (signing-identifier "com.apple.osanalyticshelper"))
		(debug-mode)
		(require-not (process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
	(require-all
		(require-any (sysctl-name "kern.kdebug.")
(sysctl-name "net.link.generic.ifdata."))
		(debug-mode)
		(require-not (process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
	(require-all
		(sysctl-name "kern.bootsessionuuid")
		(signing-identifier "com.apple.")
		(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal)))
(deny system-fcntl
	(require-all
		(ce 04d2 08fa 9ce0)
		(require-not (signing-identifier "com.apple.nanophoned"))
		(signing-identifier "com.apple.tursd")))
(deny system-fsctl
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(require-not (entitlement-is-bool-true com.apple.security.network.client))
		(require-not (entitlement-is-bool-true com.apple.security.network.server)))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 3))
		(require-not (entitlement-is-bool-true com.apple.security.network.client))
		(require-not (entitlement-is-bool-true com.apple.security.network.server)))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 68))
		(require-not (signing-identifier "com.apple.videocodecd"))
		(require-not (signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 71))
		(require-not (signing-identifier "com.apple.storagedatad")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 14))
		(require-not (signing-identifier "com.apple.storagedatad")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 2))
		(require-not (signing-identifier "com.apple.managedassetsd")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 14))
		(signing-identifier "com.apple.desktopservices.desktopserviceshelper"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(require-not (signing-identifier "com.apple.managedassetsd")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 71))
		(require-not (signing-identifier "com.apple.Carousel"))
		(require-not (signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 93))
		(require-not (signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 2))
		(require-not (signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(require-not (signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(require-not (signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 71))
		(require-not (signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 68))
		(require-not (signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 68))
		(signing-identifier "com.apple.audiomxd"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 2))
		(require-not (signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "h" 32))
		(entitlement-is-bool-true com.apple.security.ts.ubiquity))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 109))
		(require-not (signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "h" 31))
		(entitlement-is-bool-true com.apple.security.ts.ubiquity))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 93))
		(entitlement-is-bool-true com.apple.security.ts.ubiquity)
		(entitlement-is-bool-true com.apple.security.ts.revisiond-client)))
(deny system-info
	(require-all
		(info-type "hw.uuid")
		(require-any
			(require-not (signing-identifier "com.apple.assistantd"))
			(require-all
				(debug-mode)
				(require-not (process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))))
	(require-all
		(info-type "net.link.addr")
		(require-not (signing-identifier "com.apple.srp-mdns-proxy"))))
(deny system-kas-info
	(require-not (debug-mode))
	(require-not (debug-mode))
	(require-not (5e 0000 9cde 08d6))
	(require-not (process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(deny system-package-check
	(signing-identifier "com.apple.FileProviderDaemon.FPCKService"))
(deny system-reboot
	(signing-identifier "com.apple.jobquiescence.daemon"))
(deny system-socket
	(require-all
		(require-not (signing-identifier "com.apple.srp-mdns-proxy"))
		(require-not (signing-identifier "com.apple.mDNSResponderHelper"))))
(deny system-suspend-resume
	(require-all
		(require-not (signing-identifier "com.apple.mediaplaybackd"))
		(require-not (signing-identifier "com.apple.videocodecd"))
		(signing-identifier "com.apple.cameracaptured")))
(deny user-preference-read
	(require-all
		(require-not (preference-domain "com.apple.logging"))
		(require-not (preference-domain "com.apple.demo-settings"))
		(require-not (preference-domain "com.apple.NanoRegistry"))
		(require-not (preference-domain "com.apple.pairedsync"))
		(require-any
			(require-all
				(preference-domain "com.apple.ids")
				(require-all (require-not (signing-identifier "com.apple.usernotificationsd"))
(require-not (signing-identifier "com.apple.facetimemessagestored")))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService")))
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(preference-domain "com.apple.conference")
				(require-all (require-not (signing-identifier "com.apple.usernotificationsd"))
(require-not (signing-identifier "com.apple.facetimemessagestored")))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService")))
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(preference-domain "com.apple.CrashReporter")
				(require-not (signing-identifier "com.apple.mediaplaybackd"))
				(require-not (signing-identifier "com.apple.videocodecd"))
				(require-all (require-not (signing-identifier "com.apple.airplayd"))
(require-not (signing-identifier "com.apple.audiomxd"))))
			(require-all
				(preference-domain "com.apple.marco")
				(require-all (require-not (signing-identifier "com.apple.usernotificationsd"))
(require-not (signing-identifier "com.apple.facetimemessagestored")))
				(require-all (require-not (signing-identifier "com.apple.announced"))
(require-not (signing-identifier "com.apple.FTLivePhotoService")))
				(require-not (signing-identifier "com.apple.Carousel")))
			(require-all
				(preference-domain "com.apple.companionsync")
				(require-not (signing-identifier "com.apple.nanophoned"))
				(require-not (signing-identifier "com.apple.tursd")))
			(require-all
				(preference-domain "com.apple.medialibrary")
				(require-not (signing-identifier "com.apple.siriknowledged")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.addressbook)
				(preference-domain "com.apple.CoreDuet")
				(preference-domain "com.apple.AppSupport")
				(preference-domain "com.apple.iokit.IOMobileGraphicsFamily")
				(preference-domain "com.apple.DataMigration")
				(preference-domain "com.apple.icloud.findmydeviced.postwipe")
				(preference-domain "com.apple.AOSNotification.public.notbackedup")
				(preference-domain "com.apple.PeoplePicker")
				(preference-domain "com.apple.icloud.findmydeviced.public.notbackedup"))
			(require-all
				(preference-domain "com.apple.CFNetwork")
				(entitlement-is-bool-true com.apple.security.network.client))
			(require-all
				(preference-domain "com.apple.itunesstored")
				(process-attribute is-apple-signed-executable)
				(entitlement-is-bool-true com.apple.itunesstored.private)
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(entitlement-is-bool-true com.apple.security.ts.play-media)
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
			(require-all
				(preference-domain "com.apple.mobileipod")
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(entitlement-is-bool-true com.apple.security.ts.play-media)
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
			(require-all
				(preference-domain "com.apple.homesharing")
				(require-not (signing-identifier "com.apple.siriknowledged")))
			(require-all
				(preference-domain "com.apple.iclouddrive.features")
				(require-not (signing-identifier "com.apple.siri.context.service"))
				(require-not (signing-identifier "com.apple.GameController.gamecontrollerd"))
				(require-not (signing-identifier "com.apple.assistantd"))
				(require-all (require-not (signing-identifier "com.apple.storagedatad"))
(require-not (signing-identifier "com.apple.bookdatastored"))
(require-not (signing-identifier "com.apple.desktopservices.desktopserviceshelper"))
(require-not (signing-identifier "com.apple.CloudDocsDaemon.container-metadata-extractor")))
				(require-not (signing-identifier "com.apple.sociallayerd"))
				(require-not (signing-identifier "com.apple.installcoordinationd")))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.ubiquity)
				(preference-domain "com.apple.coremedia")
				(preference-domain "com.apple.coreaudio")
				(preference-domain "com.apple.avfoundation")
				(preference-domain "com.apple.corevideo"))
			(require-all
				(preference-domain "com.apple.iokit.IOMobileGraphicsFamily")
				(entitlement-is-bool-true com.apple.security.ts.render-images)
				(entitlement-is-bool-true com.apple.security.ts.framebuffer-access))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.play-media)
				(preference-domain "com.apple.coremedia")
				(preference-domain "com.apple.coreaudio")
				(preference-domain "com.apple.avfoundation")
				(preference-domain "com.apple.corevideo"))
			(require-all
				(preference-domain "com.apple.Metal")
				(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
			(require-all
				(preference-domain "com.apple.opengl")
				(entitlement-is-bool-true com.apple.security.ts.opengl-or-metal))
			(require-all
				(entitlement-is-bool-true com.apple.security.ts.location-services)
				(preference-domain "com.apple.locationd")
				(preference-domain "com.apple.AppSupport")
				(preference-domain "com.apple.GEO"))
			(require-all
				(preference-domain "com.apple.carrier")
				(entitlement-is-bool-true com.apple.security.ts.location-services))
			(require-all
				(preference-domain "com.apple.logging")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client)
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
			(require-all
				(preference-domain "com.apple.ids")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client)
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
			(require-all
				(preference-domain "com.apple.conference")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client)
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
			(require-all
				(preference-domain "com.apple.marco")
				(entitlement-is-bool-true com.apple.security.ts.identity-services-client)
				(entitlement-is-bool-true com.apple.security.ts.identity-services-receive-file))
			(require-all
				(preference-domain "com.apple.GEO")
				(entitlement-is-bool-true com.apple.security.ts.geoservices))
			(require-all
				(preference-domain "com.apple.CloudKit")
				(entitlement-is-bool-true com.apple.security.ts.cloudkit-client))
			(require-all
				(preference-domain "com.apple.MobileAsset")
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)
				(entitlement-is-bool-true com.apple.security.ts.asset-access))
			(require-all
				(preference-domain "com.apple.coremedia")
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
			(require-all
				(preference-domain "com.apple.coreaudio")
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
			(require-all
				(preference-domain "com.apple.avfoundation")
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback))
			(require-all
				(preference-domain "com.apple.corevideo")
				(entitlement-is-bool-true com.apple.security.ts.asset-access.with-media-playback)))))
(deny storage-class-map)
